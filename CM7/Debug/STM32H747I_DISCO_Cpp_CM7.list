
STM32H747I_DISCO_Cpp_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005144  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080053dc  080053dc  000063dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005414  08005414  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005414  08005414  00006414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800541c  0800541c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800541c  0800541c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005420  08005420  00006420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  08005424  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  08005434  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  08005434  000070c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000113bb  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f4c  00000000  00000000  000183f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b10  00000000  00000000  0001a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000087e  00000000  00000000  0001ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0004158b  00000000  00000000  0001b6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f6eb  00000000  00000000  0005cc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00197cff  00000000  00000000  0006c34c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0020404b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d48  00000000  00000000  00204090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00206dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080053c4 	.word	0x080053c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080053c4 	.word	0x080053c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b49      	ldr	r3, [pc, #292]	@ (80006f4 <SystemInit+0x12c>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a48      	ldr	r2, [pc, #288]	@ (80006f4 <SystemInit+0x12c>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b45      	ldr	r3, [pc, #276]	@ (80006f4 <SystemInit+0x12c>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a44      	ldr	r2, [pc, #272]	@ (80006f4 <SystemInit+0x12c>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b43      	ldr	r3, [pc, #268]	@ (80006f8 <SystemInit+0x130>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b40      	ldr	r3, [pc, #256]	@ (80006f8 <SystemInit+0x130>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a3e      	ldr	r2, [pc, #248]	@ (80006f8 <SystemInit+0x130>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b3d      	ldr	r3, [pc, #244]	@ (80006fc <SystemInit+0x134>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a3c      	ldr	r2, [pc, #240]	@ (80006fc <SystemInit+0x134>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b3a      	ldr	r3, [pc, #232]	@ (80006fc <SystemInit+0x134>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b39      	ldr	r3, [pc, #228]	@ (80006fc <SystemInit+0x134>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	4938      	ldr	r1, [pc, #224]	@ (80006fc <SystemInit+0x134>)
 800061c:	4b38      	ldr	r3, [pc, #224]	@ (8000700 <SystemInit+0x138>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b35      	ldr	r3, [pc, #212]	@ (80006f8 <SystemInit+0x130>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b32      	ldr	r3, [pc, #200]	@ (80006f8 <SystemInit+0x130>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a30      	ldr	r2, [pc, #192]	@ (80006f8 <SystemInit+0x130>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b2f      	ldr	r3, [pc, #188]	@ (80006fc <SystemInit+0x134>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b2d      	ldr	r3, [pc, #180]	@ (80006fc <SystemInit+0x134>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <SystemInit+0x134>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <SystemInit+0x134>)
 8000652:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <SystemInit+0x13c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <SystemInit+0x134>)
 8000658:	4a2b      	ldr	r2, [pc, #172]	@ (8000708 <SystemInit+0x140>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b27      	ldr	r3, [pc, #156]	@ (80006fc <SystemInit+0x134>)
 800065e:	4a2b      	ldr	r2, [pc, #172]	@ (800070c <SystemInit+0x144>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b26      	ldr	r3, [pc, #152]	@ (80006fc <SystemInit+0x134>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b24      	ldr	r3, [pc, #144]	@ (80006fc <SystemInit+0x134>)
 800066a:	4a28      	ldr	r2, [pc, #160]	@ (800070c <SystemInit+0x144>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <SystemInit+0x134>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b21      	ldr	r3, [pc, #132]	@ (80006fc <SystemInit+0x134>)
 8000676:	4a25      	ldr	r2, [pc, #148]	@ (800070c <SystemInit+0x144>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b20      	ldr	r3, [pc, #128]	@ (80006fc <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b1e      	ldr	r3, [pc, #120]	@ (80006fc <SystemInit+0x134>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1d      	ldr	r2, [pc, #116]	@ (80006fc <SystemInit+0x134>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b1b      	ldr	r3, [pc, #108]	@ (80006fc <SystemInit+0x134>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b1f      	ldr	r3, [pc, #124]	@ (8000710 <SystemInit+0x148>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a1e      	ldr	r2, [pc, #120]	@ (8000710 <SystemInit+0x148>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b1d      	ldr	r3, [pc, #116]	@ (8000714 <SystemInit+0x14c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000718 <SystemInit+0x150>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	@ (800071c <SystemInit+0x154>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006b2:	4b12      	ldr	r3, [pc, #72]	@ (80006fc <SystemInit+0x134>)
 80006b4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d113      	bne.n	80006e8 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006c0:	4b0e      	ldr	r3, [pc, #56]	@ (80006fc <SystemInit+0x134>)
 80006c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006c6:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <SystemInit+0x134>)
 80006c8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80006cc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006d0:	4b13      	ldr	r3, [pc, #76]	@ (8000720 <SystemInit+0x158>)
 80006d2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006d6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <SystemInit+0x134>)
 80006da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006de:	4a07      	ldr	r2, [pc, #28]	@ (80006fc <SystemInit+0x134>)
 80006e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80006e4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	52002000 	.word	0x52002000
 80006fc:	58024400 	.word	0x58024400
 8000700:	eaf6ed7f 	.word	0xeaf6ed7f
 8000704:	02020200 	.word	0x02020200
 8000708:	01ff0000 	.word	0x01ff0000
 800070c:	01010280 	.word	0x01010280
 8000710:	580000c0 	.word	0x580000c0
 8000714:	5c001000 	.word	0x5c001000
 8000718:	ffff0000 	.word	0xffff0000
 800071c:	51008108 	.word	0x51008108
 8000720:	52004000 	.word	0x52004000

08000724 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <ExitRun0Mode+0x2c>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	4a08      	ldr	r2, [pc, #32]	@ (8000750 <ExitRun0Mode+0x2c>)
 800072e:	f023 0302 	bic.w	r3, r3, #2
 8000732:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000734:	bf00      	nop
 8000736:	4b06      	ldr	r3, [pc, #24]	@ (8000750 <ExitRun0Mode+0x2c>)
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800073e:	2b00      	cmp	r3, #0
 8000740:	d0f9      	beq.n	8000736 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000742:	bf00      	nop
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	58024800 	.word	0x58024800

08000754 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800075a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000760:	bf00      	nop
 8000762:	4b28      	ldr	r3, [pc, #160]	@ (8000804 <main+0xb0>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800076a:	2b00      	cmp	r3, #0
 800076c:	d006      	beq.n	800077c <main+0x28>
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	1e5a      	subs	r2, r3, #1
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	dd01      	ble.n	800077c <main+0x28>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <main+0x2a>
 800077c:	2300      	movs	r3, #0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1ef      	bne.n	8000762 <main+0xe>
  if ( timeout < 0 )
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	da01      	bge.n	800078c <main+0x38>
  {
  Error_Handler();
 8000788:	f000 f9b8 	bl	8000afc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 fa9c 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f83a 	bl	8000808 <_Z18SystemClock_Configv>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000794:	f000 f8cc 	bl	8000930 <_Z24PeriphCommonClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000798:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <main+0xb0>)
 800079a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800079e:	4a19      	ldr	r2, [pc, #100]	@ (8000804 <main+0xb0>)
 80007a0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007a8:	4b16      	ldr	r3, [pc, #88]	@ (8000804 <main+0xb0>)
 80007aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007b2:	603b      	str	r3, [r7, #0]
 80007b4:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007b6:	2000      	movs	r0, #0
 80007b8:	f000 fdb8 	bl	800132c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007bc:	2100      	movs	r1, #0
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fdce 	bl	8001360 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007c8:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007ca:	bf00      	nop
 80007cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000804 <main+0xb0>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d106      	bne.n	80007e6 <main+0x92>
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	607a      	str	r2, [r7, #4]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dd01      	ble.n	80007e6 <main+0x92>
 80007e2:	2301      	movs	r3, #1
 80007e4:	e000      	b.n	80007e8 <main+0x94>
 80007e6:	2300      	movs	r3, #0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d1ef      	bne.n	80007cc <main+0x78>
if ( timeout < 0 )
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	da01      	bge.n	80007f6 <main+0xa2>
{
Error_Handler();
 80007f2:	f000 f983 	bl	8000afc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f6:	f000 f92f 	bl	8000a58 <_ZL12MX_GPIO_Initv>
  MX_USART1_UART_Init();
 80007fa:	f000 f8cd 	bl	8000998 <_ZL19MX_USART1_UART_Initv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <main+0xaa>
 8000802:	bf00      	nop
 8000804:	58024400 	.word	0x58024400

08000808 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b09c      	sub	sp, #112	@ 0x70
 800080c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800080e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000812:	224c      	movs	r2, #76	@ 0x4c
 8000814:	2100      	movs	r1, #0
 8000816:	4618      	mov	r0, r3
 8000818:	f004 fda8 	bl	800536c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2220      	movs	r2, #32
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f004 fda2 	bl	800536c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000828:	2004      	movs	r0, #4
 800082a:	f000 fdad 	bl	8001388 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800082e:	2300      	movs	r3, #0
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	4b3d      	ldr	r3, [pc, #244]	@ (8000928 <_Z18SystemClock_Configv+0x120>)
 8000834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000836:	4a3c      	ldr	r2, [pc, #240]	@ (8000928 <_Z18SystemClock_Configv+0x120>)
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800083e:	4b3a      	ldr	r3, [pc, #232]	@ (8000928 <_Z18SystemClock_Configv+0x120>)
 8000840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	4b38      	ldr	r3, [pc, #224]	@ (800092c <_Z18SystemClock_Configv+0x124>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a37      	ldr	r2, [pc, #220]	@ (800092c <_Z18SystemClock_Configv+0x124>)
 800084e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b35      	ldr	r3, [pc, #212]	@ (800092c <_Z18SystemClock_Configv+0x124>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000860:	bf00      	nop
 8000862:	4b32      	ldr	r3, [pc, #200]	@ (800092c <_Z18SystemClock_Configv+0x124>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800086a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800086e:	bf14      	ite	ne
 8000870:	2301      	movne	r3, #1
 8000872:	2300      	moveq	r3, #0
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f3      	bne.n	8000862 <_Z18SystemClock_Configv+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800087a:	230b      	movs	r3, #11
 800087c:	627b      	str	r3, [r7, #36]	@ 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800087e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000884:	2301      	movs	r3, #1
 8000886:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000888:	2340      	movs	r3, #64	@ 0x40
 800088a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800088c:	2301      	movs	r3, #1
 800088e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000894:	2302      	movs	r3, #2
 8000896:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000898:	2305      	movs	r3, #5
 800089a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 48;
 800089c:	2330      	movs	r3, #48	@ 0x30
 800089e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008a4:	2305      	movs	r3, #5
 80008a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008ac:	2308      	movs	r3, #8
 80008ae:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008b0:	2300      	movs	r3, #0
 80008b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 fdbd 	bl	800143c <HAL_RCC_OscConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	bf14      	ite	ne
 80008c8:	2301      	movne	r3, #1
 80008ca:	2300      	moveq	r3, #0
 80008cc:	b2db      	uxtb	r3, r3
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 80008d2:	f000 f913 	bl	8000afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	233f      	movs	r3, #63	@ 0x3f
 80008d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008da:	2300      	movs	r3, #0
 80008dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008e2:	2300      	movs	r3, #0
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2100      	movs	r1, #0
 80008fa:	4618      	mov	r0, r3
 80008fc:	f001 f9f8 	bl	8001cf0 <HAL_RCC_ClockConfig>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	bf14      	ite	ne
 8000906:	2301      	movne	r3, #1
 8000908:	2300      	moveq	r3, #0
 800090a:	b2db      	uxtb	r3, r3
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <_Z18SystemClock_Configv+0x10c>
  {
    Error_Handler();
 8000910:	f000 f8f4 	bl	8000afc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000914:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000918:	2100      	movs	r1, #0
 800091a:	2000      	movs	r0, #0
 800091c:	f001 fb9e 	bl	800205c <HAL_RCC_MCOConfig>
}
 8000920:	bf00      	nop
 8000922:	3770      	adds	r7, #112	@ 0x70
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58000400 	.word	0x58000400
 800092c:	58024800 	.word	0x58024800

08000930 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b0b2      	sub	sp, #200	@ 0xc8
 8000934:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	22c8      	movs	r2, #200	@ 0xc8
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f004 fd15 	bl	800536c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000942:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000946:	f04f 0300 	mov.w	r3, #0
 800094a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 800094e:	2302      	movs	r3, #2
 8000950:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000952:	230c      	movs	r3, #12
 8000954:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000962:	23c0      	movs	r3, #192	@ 0xc0
 8000964:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000966:	2320      	movs	r3, #32
 8000968:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800096e:	2300      	movs	r3, #0
 8000970:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000974:	463b      	mov	r3, r7
 8000976:	4618      	mov	r0, r3
 8000978:	f001 fdb0 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	bf14      	ite	ne
 8000982:	2301      	movne	r3, #1
 8000984:	2300      	moveq	r3, #0
 8000986:	b2db      	uxtb	r3, r3
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <_Z24PeriphCommonClock_Configv+0x60>
  {
    Error_Handler();
 800098c:	f000 f8b6 	bl	8000afc <Error_Handler>
  }
}
 8000990:	bf00      	nop
 8000992:	37c8      	adds	r7, #200	@ 0xc8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800099c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 800099e:	4a2d      	ldr	r2, [pc, #180]	@ (8000a54 <_ZL19MX_USART1_UART_Initv+0xbc>)
 80009a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009aa:	4b29      	ldr	r3, [pc, #164]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b0:	4b27      	ldr	r3, [pc, #156]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b6:	4b26      	ldr	r3, [pc, #152]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009bc:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009be:	220c      	movs	r2, #12
 80009c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c2:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c8:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ce:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009da:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009dc:	2200      	movs	r2, #0
 80009de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e0:	481b      	ldr	r0, [pc, #108]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009e2:	f003 fbe7 	bl	80041b4 <HAL_UART_Init>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <_ZL19MX_USART1_UART_Initv+0x62>
  {
    Error_Handler();
 80009f6:	f000 f881 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4814      	ldr	r0, [pc, #80]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 80009fe:	f004 fbea 	bl	80051d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <_ZL19MX_USART1_UART_Initv+0x7e>
  {
    Error_Handler();
 8000a12:	f000 f873 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	480d      	ldr	r0, [pc, #52]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a1a:	f004 fc1a 	bl	8005252 <HAL_UARTEx_SetRxFifoThreshold>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	bf14      	ite	ne
 8000a24:	2301      	movne	r3, #1
 8000a26:	2300      	moveq	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <_ZL19MX_USART1_UART_Initv+0x9a>
  {
    Error_Handler();
 8000a2e:	f000 f865 	bl	8000afc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a32:	4807      	ldr	r0, [pc, #28]	@ (8000a50 <_ZL19MX_USART1_UART_Initv+0xb8>)
 8000a34:	f004 fb96 	bl	8005164 <HAL_UARTEx_DisableFifoMode>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	bf14      	ite	ne
 8000a3e:	2301      	movne	r3, #1
 8000a40:	2300      	moveq	r3, #0
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <_ZL19MX_USART1_UART_Initv+0xb4>
  {
    Error_Handler();
 8000a48:	f000 f858 	bl	8000afc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2400002c 	.word	0x2400002c
 8000a54:	40011000 	.word	0x40011000

08000a58 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b088      	sub	sp, #32
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 030c 	add.w	r3, r7, #12
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b21      	ldr	r3, [pc, #132]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a76:	f043 0304 	orr.w	r3, r3, #4
 8000a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	60bb      	str	r3, [r7, #8]
 8000a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a92:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a9c:	4b15      	ldr	r3, [pc, #84]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aaa:	4b12      	ldr	r3, [pc, #72]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000aac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab0:	4a10      	ldr	r2, [pc, #64]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000ab2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ab6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <_ZL12MX_GPIO_Initv+0x9c>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000acc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000ade:	f107 030c 	add.w	r3, r7, #12
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <_ZL12MX_GPIO_Initv+0xa0>)
 8000ae6:	f000 fa71 	bl	8000fcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aea:	bf00      	nop
 8000aec:	3720      	adds	r7, #32
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	58024400 	.word	0x58024400
 8000af8:	58020000 	.word	0x58020000

08000afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b00:	b672      	cpsid	i
}
 8000b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <Error_Handler+0x8>

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b38 <HAL_MspInit+0x30>)
 8000b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b14:	4a08      	ldr	r2, [pc, #32]	@ (8000b38 <HAL_MspInit+0x30>)
 8000b16:	f043 0302 	orr.w	r3, r3, #2
 8000b1a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <HAL_MspInit+0x30>)
 8000b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b24:	f003 0302 	and.w	r3, r3, #2
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	370c      	adds	r7, #12
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	58024400 	.word	0x58024400

08000b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b0bc      	sub	sp, #240	@ 0xf0
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b44:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b48:	2200      	movs	r2, #0
 8000b4a:	601a      	str	r2, [r3, #0]
 8000b4c:	605a      	str	r2, [r3, #4]
 8000b4e:	609a      	str	r2, [r3, #8]
 8000b50:	60da      	str	r2, [r3, #12]
 8000b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	22c8      	movs	r2, #200	@ 0xc8
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f004 fc05 	bl	800536c <memset>
  if(huart->Instance==USART1)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4a27      	ldr	r2, [pc, #156]	@ (8000c04 <HAL_UART_MspInit+0xc8>)
 8000b68:	4293      	cmp	r3, r2
 8000b6a:	d146      	bne.n	8000bfa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b6c:	f04f 0201 	mov.w	r2, #1
 8000b70:	f04f 0300 	mov.w	r3, #0
 8000b74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b7e:	f107 0310 	add.w	r3, r7, #16
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 fcaa 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b8e:	f7ff ffb5 	bl	8000afc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b92:	4b1d      	ldr	r3, [pc, #116]	@ (8000c08 <HAL_UART_MspInit+0xcc>)
 8000b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b98:	4a1b      	ldr	r2, [pc, #108]	@ (8000c08 <HAL_UART_MspInit+0xcc>)
 8000b9a:	f043 0310 	orr.w	r3, r3, #16
 8000b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000ba2:	4b19      	ldr	r3, [pc, #100]	@ (8000c08 <HAL_UART_MspInit+0xcc>)
 8000ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b15      	ldr	r3, [pc, #84]	@ (8000c08 <HAL_UART_MspInit+0xcc>)
 8000bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb6:	4a14      	ldr	r2, [pc, #80]	@ (8000c08 <HAL_UART_MspInit+0xcc>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc0:	4b11      	ldr	r3, [pc, #68]	@ (8000c08 <HAL_UART_MspInit+0xcc>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	60bb      	str	r3, [r7, #8]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000bce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be8:	2307      	movs	r3, #7
 8000bea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	@ (8000c0c <HAL_UART_MspInit+0xd0>)
 8000bf6:	f000 f9e9 	bl	8000fcc <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bfa:	bf00      	nop
 8000bfc:	37f0      	adds	r7, #240	@ 0xf0
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40011000 	.word	0x40011000
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	58020000 	.word	0x58020000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <NMI_Handler+0x4>

08000c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <HardFault_Handler+0x4>

08000c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <MemManage_Handler+0x4>

08000c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c4a:	bf00      	nop
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c66:	f000 f8a1 	bl	8000dac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c70:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cac <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c74:	f7ff fd56 	bl	8000724 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c78:	f7ff fca6 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 fb6b 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ca6:	f7ff fd55 	bl	8000754 <main>
  bx  lr
 8000caa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cb4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cb8:	08005424 	.word	0x08005424
  ldr r2, =_sbss
 8000cbc:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000cc0:	240000c4 	.word	0x240000c4

08000cc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC3_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cce:	2003      	movs	r0, #3
 8000cd0:	f000 f94a 	bl	8000f68 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cd4:	f001 fa2c 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <HAL_Init+0x68>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	0a1b      	lsrs	r3, r3, #8
 8000ce0:	f003 030f 	and.w	r3, r3, #15
 8000ce4:	4913      	ldr	r1, [pc, #76]	@ (8000d34 <HAL_Init+0x6c>)
 8000ce6:	5ccb      	ldrb	r3, [r1, r3]
 8000ce8:	f003 031f 	and.w	r3, r3, #31
 8000cec:	fa22 f303 	lsr.w	r3, r2, r3
 8000cf0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000cf2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d30 <HAL_Init+0x68>)
 8000cf4:	699b      	ldr	r3, [r3, #24]
 8000cf6:	f003 030f 	and.w	r3, r3, #15
 8000cfa:	4a0e      	ldr	r2, [pc, #56]	@ (8000d34 <HAL_Init+0x6c>)
 8000cfc:	5cd3      	ldrb	r3, [r2, r3]
 8000cfe:	f003 031f 	and.w	r3, r3, #31
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	fa22 f303 	lsr.w	r3, r2, r3
 8000d08:	4a0b      	ldr	r2, [pc, #44]	@ (8000d38 <HAL_Init+0x70>)
 8000d0a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d0c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d3c <HAL_Init+0x74>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d12:	2000      	movs	r0, #0
 8000d14:	f000 f814 	bl	8000d40 <HAL_InitTick>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e002      	b.n	8000d28 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d22:	f7ff fef1 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	58024400 	.word	0x58024400
 8000d34:	080053dc 	.word	0x080053dc
 8000d38:	24000004 	.word	0x24000004
 8000d3c:	24000000 	.word	0x24000000

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <HAL_InitTick+0x60>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d101      	bne.n	8000d54 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e021      	b.n	8000d98 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d54:	4b13      	ldr	r3, [pc, #76]	@ (8000da4 <HAL_InitTick+0x64>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f000 f921 	bl	8000fb2 <HAL_SYSTICK_Config>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e00e      	b.n	8000d98 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2b0f      	cmp	r3, #15
 8000d7e:	d80a      	bhi.n	8000d96 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d80:	2200      	movs	r2, #0
 8000d82:	6879      	ldr	r1, [r7, #4]
 8000d84:	f04f 30ff 	mov.w	r0, #4294967295
 8000d88:	f000 f8f9 	bl	8000f7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d8c:	4a06      	ldr	r2, [pc, #24]	@ (8000da8 <HAL_InitTick+0x68>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d92:	2300      	movs	r3, #0
 8000d94:	e000      	b.n	8000d98 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	2400000c 	.word	0x2400000c
 8000da4:	24000000 	.word	0x24000000
 8000da8:	24000008 	.word	0x24000008

08000dac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <HAL_IncTick+0x20>)
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <HAL_IncTick+0x24>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4413      	add	r3, r2
 8000dbc:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <HAL_IncTick+0x24>)
 8000dbe:	6013      	str	r3, [r2, #0]
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	2400000c 	.word	0x2400000c
 8000dd0:	240000c0 	.word	0x240000c0

08000dd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	@ (8000de8 <HAL_GetTick+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	240000c0 	.word	0x240000c0

08000dec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000df0:	4b03      	ldr	r3, [pc, #12]	@ (8000e00 <HAL_GetREVID+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0c1b      	lsrs	r3, r3, #16
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	5c001000 	.word	0x5c001000

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0b      	ldr	r3, [pc, #44]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e2c:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	05fa0000 	.word	0x05fa0000

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	@ (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e74:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0a      	blt.n	8000e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	490c      	ldr	r1, [pc, #48]	@ (8000eb4 <__NVIC_SetPriority+0x4c>)
 8000e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e86:	0112      	lsls	r2, r2, #4
 8000e88:	b2d2      	uxtb	r2, r2
 8000e8a:	440b      	add	r3, r1
 8000e8c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e90:	e00a      	b.n	8000ea8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	b2da      	uxtb	r2, r3
 8000e96:	4908      	ldr	r1, [pc, #32]	@ (8000eb8 <__NVIC_SetPriority+0x50>)
 8000e98:	88fb      	ldrh	r3, [r7, #6]
 8000e9a:	f003 030f 	and.w	r3, r3, #15
 8000e9e:	3b04      	subs	r3, #4
 8000ea0:	0112      	lsls	r2, r2, #4
 8000ea2:	b2d2      	uxtb	r2, r2
 8000ea4:	440b      	add	r3, r1
 8000ea6:	761a      	strb	r2, [r3, #24]
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000e100 	.word	0xe000e100
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b089      	sub	sp, #36	@ 0x24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f1c3 0307 	rsb	r3, r3, #7
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf28      	it	cs
 8000eda:	2304      	movcs	r3, #4
 8000edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3304      	adds	r3, #4
 8000ee2:	2b06      	cmp	r3, #6
 8000ee4:	d902      	bls.n	8000eec <NVIC_EncodePriority+0x30>
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3b03      	subs	r3, #3
 8000eea:	e000      	b.n	8000eee <NVIC_EncodePriority+0x32>
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43da      	mvns	r2, r3
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f04:	f04f 31ff 	mov.w	r1, #4294967295
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f0e:	43d9      	mvns	r1, r3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f14:	4313      	orrs	r3, r2
         );
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3724      	adds	r7, #36	@ 0x24
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f34:	d301      	bcc.n	8000f3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f36:	2301      	movs	r3, #1
 8000f38:	e00f      	b.n	8000f5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <SysTick_Config+0x40>)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3b01      	subs	r3, #1
 8000f40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f42:	210f      	movs	r1, #15
 8000f44:	f04f 30ff 	mov.w	r0, #4294967295
 8000f48:	f7ff ff8e 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f4c:	4b05      	ldr	r3, [pc, #20]	@ (8000f64 <SysTick_Config+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f52:	4b04      	ldr	r3, [pc, #16]	@ (8000f64 <SysTick_Config+0x40>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	e000e010 	.word	0xe000e010

08000f68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ff47 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b086      	sub	sp, #24
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	4603      	mov	r3, r0
 8000f86:	60b9      	str	r1, [r7, #8]
 8000f88:	607a      	str	r2, [r7, #4]
 8000f8a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f8c:	f7ff ff5e 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000f90:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	6978      	ldr	r0, [r7, #20]
 8000f98:	f7ff ff90 	bl	8000ebc <NVIC_EncodePriority>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fa2:	4611      	mov	r1, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff5f 	bl	8000e68 <__NVIC_SetPriority>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffb2 	bl	8000f24 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b089      	sub	sp, #36	@ 0x24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000fda:	4b89      	ldr	r3, [pc, #548]	@ (8001200 <HAL_GPIO_Init+0x234>)
 8000fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000fde:	e194      	b.n	800130a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 8186 	beq.w	8001304 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b01      	cmp	r3, #1
 8001002:	d005      	beq.n	8001010 <HAL_GPIO_Init+0x44>
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b02      	cmp	r3, #2
 800100e:	d130      	bne.n	8001072 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	68da      	ldr	r2, [r3, #12]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001046:	2201      	movs	r2, #1
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	091b      	lsrs	r3, r3, #4
 800105c:	f003 0201 	and.w	r2, r3, #1
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0303 	and.w	r3, r3, #3
 800107a:	2b03      	cmp	r3, #3
 800107c:	d017      	beq.n	80010ae <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	689a      	ldr	r2, [r3, #8]
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	69ba      	ldr	r2, [r7, #24]
 80010ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 0303 	and.w	r3, r3, #3
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d123      	bne.n	8001102 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	08da      	lsrs	r2, r3, #3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	3208      	adds	r2, #8
 80010c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	691a      	ldr	r2, [r3, #16]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f003 0307 	and.w	r3, r3, #7
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	08da      	lsrs	r2, r3, #3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3208      	adds	r2, #8
 80010fc:	69b9      	ldr	r1, [r7, #24]
 80010fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	2203      	movs	r2, #3
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	43db      	mvns	r3, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4013      	ands	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0203 	and.w	r2, r3, #3
 8001122:	69fb      	ldr	r3, [r7, #28]
 8001124:	005b      	lsls	r3, r3, #1
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800113e:	2b00      	cmp	r3, #0
 8001140:	f000 80e0 	beq.w	8001304 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001144:	4b2f      	ldr	r3, [pc, #188]	@ (8001204 <HAL_GPIO_Init+0x238>)
 8001146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800114a:	4a2e      	ldr	r2, [pc, #184]	@ (8001204 <HAL_GPIO_Init+0x238>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001154:	4b2b      	ldr	r3, [pc, #172]	@ (8001204 <HAL_GPIO_Init+0x238>)
 8001156:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001162:	4a29      	ldr	r2, [pc, #164]	@ (8001208 <HAL_GPIO_Init+0x23c>)
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	089b      	lsrs	r3, r3, #2
 8001168:	3302      	adds	r3, #2
 800116a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f003 0303 	and.w	r3, r3, #3
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	220f      	movs	r2, #15
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a20      	ldr	r2, [pc, #128]	@ (800120c <HAL_GPIO_Init+0x240>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d052      	beq.n	8001234 <HAL_GPIO_Init+0x268>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a1f      	ldr	r2, [pc, #124]	@ (8001210 <HAL_GPIO_Init+0x244>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d031      	beq.n	80011fa <HAL_GPIO_Init+0x22e>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a1e      	ldr	r2, [pc, #120]	@ (8001214 <HAL_GPIO_Init+0x248>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d02b      	beq.n	80011f6 <HAL_GPIO_Init+0x22a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001218 <HAL_GPIO_Init+0x24c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d025      	beq.n	80011f2 <HAL_GPIO_Init+0x226>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <HAL_GPIO_Init+0x250>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d01f      	beq.n	80011ee <HAL_GPIO_Init+0x222>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_GPIO_Init+0x254>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d019      	beq.n	80011ea <HAL_GPIO_Init+0x21e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a1a      	ldr	r2, [pc, #104]	@ (8001224 <HAL_GPIO_Init+0x258>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d013      	beq.n	80011e6 <HAL_GPIO_Init+0x21a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a19      	ldr	r2, [pc, #100]	@ (8001228 <HAL_GPIO_Init+0x25c>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d00d      	beq.n	80011e2 <HAL_GPIO_Init+0x216>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a18      	ldr	r2, [pc, #96]	@ (800122c <HAL_GPIO_Init+0x260>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d007      	beq.n	80011de <HAL_GPIO_Init+0x212>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a17      	ldr	r2, [pc, #92]	@ (8001230 <HAL_GPIO_Init+0x264>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d101      	bne.n	80011da <HAL_GPIO_Init+0x20e>
 80011d6:	2309      	movs	r3, #9
 80011d8:	e02d      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011da:	230a      	movs	r3, #10
 80011dc:	e02b      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011de:	2308      	movs	r3, #8
 80011e0:	e029      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e027      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011e6:	2306      	movs	r3, #6
 80011e8:	e025      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011ea:	2305      	movs	r3, #5
 80011ec:	e023      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011ee:	2304      	movs	r3, #4
 80011f0:	e021      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011f2:	2303      	movs	r3, #3
 80011f4:	e01f      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011f6:	2302      	movs	r3, #2
 80011f8:	e01d      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011fa:	2301      	movs	r3, #1
 80011fc:	e01b      	b.n	8001236 <HAL_GPIO_Init+0x26a>
 80011fe:	bf00      	nop
 8001200:	58000080 	.word	0x58000080
 8001204:	58024400 	.word	0x58024400
 8001208:	58000400 	.word	0x58000400
 800120c:	58020000 	.word	0x58020000
 8001210:	58020400 	.word	0x58020400
 8001214:	58020800 	.word	0x58020800
 8001218:	58020c00 	.word	0x58020c00
 800121c:	58021000 	.word	0x58021000
 8001220:	58021400 	.word	0x58021400
 8001224:	58021800 	.word	0x58021800
 8001228:	58021c00 	.word	0x58021c00
 800122c:	58022000 	.word	0x58022000
 8001230:	58022400 	.word	0x58022400
 8001234:	2300      	movs	r3, #0
 8001236:	69fa      	ldr	r2, [r7, #28]
 8001238:	f002 0203 	and.w	r2, r2, #3
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	4093      	lsls	r3, r2
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001246:	4938      	ldr	r1, [pc, #224]	@ (8001328 <HAL_GPIO_Init+0x35c>)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	089b      	lsrs	r3, r3, #2
 800124c:	3302      	adds	r3, #2
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	4313      	orrs	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800127a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80012a8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	69ba      	ldr	r2, [r7, #24]
 80012d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	43db      	mvns	r3, r3
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	4013      	ands	r3, r2
 80012e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d003      	beq.n	80012fe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80012f6:	69ba      	ldr	r2, [r7, #24]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	3301      	adds	r3, #1
 8001308:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	2b00      	cmp	r3, #0
 8001316:	f47f ae63 	bne.w	8000fe0 <HAL_GPIO_Init+0x14>
  }
}
 800131a:	bf00      	nop
 800131c:	bf00      	nop
 800131e:	3724      	adds	r7, #36	@ 0x24
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	58000400 	.word	0x58000400

0800132c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001334:	4a08      	ldr	r2, [pc, #32]	@ (8001358 <HAL_HSEM_FastTake+0x2c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3320      	adds	r3, #32
 800133a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_HSEM_FastTake+0x30>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	e000      	b.n	800134a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
}
 800134a:	4618      	mov	r0, r3
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	58026400 	.word	0x58026400
 800135c:	80000300 	.word	0x80000300

08001360 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800136a:	4906      	ldr	r1, [pc, #24]	@ (8001384 <HAL_HSEM_Release+0x24>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	58026400 	.word	0x58026400

08001388 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001390:	4b29      	ldr	r3, [pc, #164]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	2b06      	cmp	r3, #6
 800139a:	d00a      	beq.n	80013b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800139c:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d001      	beq.n	80013ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e040      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80013ae:	2300      	movs	r3, #0
 80013b0:	e03e      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80013b2:	4b21      	ldr	r3, [pc, #132]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80013ba:	491f      	ldr	r1, [pc, #124]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	4313      	orrs	r3, r2
 80013c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80013c2:	f7ff fd07 	bl	8000dd4 <HAL_GetTick>
 80013c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013c8:	e009      	b.n	80013de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80013ca:	f7ff fd03 	bl	8000dd4 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80013d8:	d901      	bls.n	80013de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e028      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80013de:	4b16      	ldr	r3, [pc, #88]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013ea:	d1ee      	bne.n	80013ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b1e      	cmp	r3, #30
 80013f0:	d008      	beq.n	8001404 <HAL_PWREx_ConfigSupply+0x7c>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80013f6:	d005      	beq.n	8001404 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b1d      	cmp	r3, #29
 80013fc:	d002      	beq.n	8001404 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b2d      	cmp	r3, #45	@ 0x2d
 8001402:	d114      	bne.n	800142e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001404:	f7ff fce6 	bl	8000dd4 <HAL_GetTick>
 8001408:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800140a:	e009      	b.n	8001420 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800140c:	f7ff fce2 	bl	8000dd4 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800141a:	d901      	bls.n	8001420 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e007      	b.n	8001430 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001420:	4b05      	ldr	r3, [pc, #20]	@ (8001438 <HAL_PWREx_ConfigSupply+0xb0>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800142c:	d1ee      	bne.n	800140c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800142e:	2300      	movs	r3, #0
}
 8001430:	4618      	mov	r0, r3
 8001432:	3710      	adds	r7, #16
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	58024800 	.word	0x58024800

0800143c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b08c      	sub	sp, #48	@ 0x30
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d102      	bne.n	8001450 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	f000 bc48 	b.w	8001ce0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f003 0301 	and.w	r3, r3, #1
 8001458:	2b00      	cmp	r3, #0
 800145a:	f000 8088 	beq.w	800156e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800145e:	4b99      	ldr	r3, [pc, #612]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001468:	4b96      	ldr	r3, [pc, #600]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800146a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800146c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800146e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001470:	2b10      	cmp	r3, #16
 8001472:	d007      	beq.n	8001484 <HAL_RCC_OscConfig+0x48>
 8001474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001476:	2b18      	cmp	r3, #24
 8001478:	d111      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
 800147a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800147c:	f003 0303 	and.w	r3, r3, #3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d10c      	bne.n	800149e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4b8f      	ldr	r3, [pc, #572]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d06d      	beq.n	800156c <HAL_RCC_OscConfig+0x130>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d169      	bne.n	800156c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001498:	2301      	movs	r3, #1
 800149a:	f000 bc21 	b.w	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014a6:	d106      	bne.n	80014b6 <HAL_RCC_OscConfig+0x7a>
 80014a8:	4b86      	ldr	r3, [pc, #536]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a85      	ldr	r2, [pc, #532]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014b2:	6013      	str	r3, [r2, #0]
 80014b4:	e02e      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d10c      	bne.n	80014d8 <HAL_RCC_OscConfig+0x9c>
 80014be:	4b81      	ldr	r3, [pc, #516]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a80      	ldr	r2, [pc, #512]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	4b7e      	ldr	r3, [pc, #504]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4a7d      	ldr	r2, [pc, #500]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d4:	6013      	str	r3, [r2, #0]
 80014d6:	e01d      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0xc0>
 80014e2:	4b78      	ldr	r3, [pc, #480]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a77      	ldr	r2, [pc, #476]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014ec:	6013      	str	r3, [r2, #0]
 80014ee:	4b75      	ldr	r3, [pc, #468]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a74      	ldr	r2, [pc, #464]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	e00b      	b.n	8001514 <HAL_RCC_OscConfig+0xd8>
 80014fc:	4b71      	ldr	r3, [pc, #452]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a70      	ldr	r2, [pc, #448]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b6e      	ldr	r3, [pc, #440]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a6d      	ldr	r2, [pc, #436]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800150e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001512:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d013      	beq.n	8001544 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151c:	f7ff fc5a 	bl	8000dd4 <HAL_GetTick>
 8001520:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc56 	bl	8000dd4 <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e3d4      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001536:	4b63      	ldr	r3, [pc, #396]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d0f0      	beq.n	8001524 <HAL_RCC_OscConfig+0xe8>
 8001542:	e014      	b.n	800156e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fc46 	bl	8000dd4 <HAL_GetTick>
 8001548:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800154a:	e008      	b.n	800155e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800154c:	f7ff fc42 	bl	8000dd4 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b64      	cmp	r3, #100	@ 0x64
 8001558:	d901      	bls.n	800155e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e3c0      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155e:	4b59      	ldr	r3, [pc, #356]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1f0      	bne.n	800154c <HAL_RCC_OscConfig+0x110>
 800156a:	e000      	b.n	800156e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	f000 80ca 	beq.w	8001710 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800157c:	4b51      	ldr	r3, [pc, #324]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800157e:	691b      	ldr	r3, [r3, #16]
 8001580:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001584:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001586:	4b4f      	ldr	r3, [pc, #316]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800158c:	6a3b      	ldr	r3, [r7, #32]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_RCC_OscConfig+0x166>
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	2b18      	cmp	r3, #24
 8001596:	d156      	bne.n	8001646 <HAL_RCC_OscConfig+0x20a>
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d151      	bne.n	8001646 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a2:	4b48      	ldr	r3, [pc, #288]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d005      	beq.n	80015ba <HAL_RCC_OscConfig+0x17e>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d101      	bne.n	80015ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e392      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015ba:	4b42      	ldr	r3, [pc, #264]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f023 0219 	bic.w	r2, r3, #25
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	493f      	ldr	r1, [pc, #252]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff fc02 	bl	8000dd4 <HAL_GetTick>
 80015d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d4:	f7ff fbfe 	bl	8000dd4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e37c      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e6:	4b37      	ldr	r3, [pc, #220]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0304 	and.w	r3, r3, #4
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f2:	f7ff fbfb 	bl	8000dec <HAL_GetREVID>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d817      	bhi.n	8001630 <HAL_RCC_OscConfig+0x1f4>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	691b      	ldr	r3, [r3, #16]
 8001604:	2b40      	cmp	r3, #64	@ 0x40
 8001606:	d108      	bne.n	800161a <HAL_RCC_OscConfig+0x1de>
 8001608:	4b2e      	ldr	r3, [pc, #184]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001610:	4a2c      	ldr	r2, [pc, #176]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001612:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001616:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001618:	e07a      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800161a:	4b2a      	ldr	r3, [pc, #168]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	691b      	ldr	r3, [r3, #16]
 8001626:	031b      	lsls	r3, r3, #12
 8001628:	4926      	ldr	r1, [pc, #152]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162e:	e06f      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b24      	ldr	r3, [pc, #144]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	4921      	ldr	r1, [pc, #132]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001644:	e064      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d047      	beq.n	80016de <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800164e:	4b1d      	ldr	r3, [pc, #116]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 0219 	bic.w	r2, r3, #25
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	491a      	ldr	r1, [pc, #104]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800165c:	4313      	orrs	r3, r2
 800165e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001660:	f7ff fbb8 	bl	8000dd4 <HAL_GetTick>
 8001664:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001666:	e008      	b.n	800167a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001668:	f7ff fbb4 	bl	8000dd4 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d901      	bls.n	800167a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e332      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	d0f0      	beq.n	8001668 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001686:	f7ff fbb1 	bl	8000dec <HAL_GetREVID>
 800168a:	4603      	mov	r3, r0
 800168c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001690:	4293      	cmp	r3, r2
 8001692:	d819      	bhi.n	80016c8 <HAL_RCC_OscConfig+0x28c>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	691b      	ldr	r3, [r3, #16]
 8001698:	2b40      	cmp	r3, #64	@ 0x40
 800169a:	d108      	bne.n	80016ae <HAL_RCC_OscConfig+0x272>
 800169c:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80016a4:	4a07      	ldr	r2, [pc, #28]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80016a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016aa:	6053      	str	r3, [r2, #4]
 80016ac:	e030      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
 80016ae:	4b05      	ldr	r3, [pc, #20]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	691b      	ldr	r3, [r3, #16]
 80016ba:	031b      	lsls	r3, r3, #12
 80016bc:	4901      	ldr	r1, [pc, #4]	@ (80016c4 <HAL_RCC_OscConfig+0x288>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	604b      	str	r3, [r1, #4]
 80016c2:	e025      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
 80016c4:	58024400 	.word	0x58024400
 80016c8:	4b9a      	ldr	r3, [pc, #616]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	061b      	lsls	r3, r3, #24
 80016d6:	4997      	ldr	r1, [pc, #604]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
 80016dc:	e018      	b.n	8001710 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016de:	4b95      	ldr	r3, [pc, #596]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a94      	ldr	r2, [pc, #592]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	f023 0301 	bic.w	r3, r3, #1
 80016e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ea:	f7ff fb73 	bl	8000dd4 <HAL_GetTick>
 80016ee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016f0:	e008      	b.n	8001704 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016f2:	f7ff fb6f 	bl	8000dd4 <HAL_GetTick>
 80016f6:	4602      	mov	r2, r0
 80016f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e2ed      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001704:	4b8b      	ldr	r3, [pc, #556]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0304 	and.w	r3, r3, #4
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f0      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0310 	and.w	r3, r3, #16
 8001718:	2b00      	cmp	r3, #0
 800171a:	f000 80a9 	beq.w	8001870 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800171e:	4b85      	ldr	r3, [pc, #532]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001726:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001728:	4b82      	ldr	r3, [pc, #520]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800172a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800172c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b08      	cmp	r3, #8
 8001732:	d007      	beq.n	8001744 <HAL_RCC_OscConfig+0x308>
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	2b18      	cmp	r3, #24
 8001738:	d13a      	bne.n	80017b0 <HAL_RCC_OscConfig+0x374>
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b01      	cmp	r3, #1
 8001742:	d135      	bne.n	80017b0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001744:	4b7b      	ldr	r3, [pc, #492]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800174c:	2b00      	cmp	r3, #0
 800174e:	d005      	beq.n	800175c <HAL_RCC_OscConfig+0x320>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	2b80      	cmp	r3, #128	@ 0x80
 8001756:	d001      	beq.n	800175c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e2c1      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800175c:	f7ff fb46 	bl	8000dec <HAL_GetREVID>
 8001760:	4603      	mov	r3, r0
 8001762:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001766:	4293      	cmp	r3, r2
 8001768:	d817      	bhi.n	800179a <HAL_RCC_OscConfig+0x35e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
 800176e:	2b20      	cmp	r3, #32
 8001770:	d108      	bne.n	8001784 <HAL_RCC_OscConfig+0x348>
 8001772:	4b70      	ldr	r3, [pc, #448]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800177a:	4a6e      	ldr	r2, [pc, #440]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800177c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001780:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001782:	e075      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001784:	4b6b      	ldr	r3, [pc, #428]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	069b      	lsls	r3, r3, #26
 8001792:	4968      	ldr	r1, [pc, #416]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001794:	4313      	orrs	r3, r2
 8001796:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001798:	e06a      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800179a:	4b66      	ldr	r3, [pc, #408]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	061b      	lsls	r3, r3, #24
 80017a8:	4962      	ldr	r1, [pc, #392]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017ae:	e05f      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69db      	ldr	r3, [r3, #28]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d042      	beq.n	800183e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fb06 	bl	8000dd4 <HAL_GetTick>
 80017c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017ca:	e008      	b.n	80017de <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017cc:	f7ff fb02 	bl	8000dd4 <HAL_GetTick>
 80017d0:	4602      	mov	r2, r0
 80017d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e280      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017de:	4b55      	ldr	r3, [pc, #340]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d0f0      	beq.n	80017cc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ea:	f7ff faff 	bl	8000dec <HAL_GetREVID>
 80017ee:	4603      	mov	r3, r0
 80017f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d817      	bhi.n	8001828 <HAL_RCC_OscConfig+0x3ec>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
 80017fc:	2b20      	cmp	r3, #32
 80017fe:	d108      	bne.n	8001812 <HAL_RCC_OscConfig+0x3d6>
 8001800:	4b4c      	ldr	r3, [pc, #304]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001808:	4a4a      	ldr	r2, [pc, #296]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800180a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800180e:	6053      	str	r3, [r2, #4]
 8001810:	e02e      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
 8001812:	4b48      	ldr	r3, [pc, #288]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a1b      	ldr	r3, [r3, #32]
 800181e:	069b      	lsls	r3, r3, #26
 8001820:	4944      	ldr	r1, [pc, #272]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001822:	4313      	orrs	r3, r2
 8001824:	604b      	str	r3, [r1, #4]
 8001826:	e023      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
 8001828:	4b42      	ldr	r3, [pc, #264]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	493f      	ldr	r1, [pc, #252]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001838:	4313      	orrs	r3, r2
 800183a:	60cb      	str	r3, [r1, #12]
 800183c:	e018      	b.n	8001870 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800183e:	4b3d      	ldr	r3, [pc, #244]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a3c      	ldr	r2, [pc, #240]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001844:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001848:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184a:	f7ff fac3 	bl	8000dd4 <HAL_GetTick>
 800184e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001852:	f7ff fabf 	bl	8000dd4 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e23d      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001864:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800186c:	2b00      	cmp	r3, #0
 800186e:	d1f0      	bne.n	8001852 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	d036      	beq.n	80018ea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	695b      	ldr	r3, [r3, #20]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d019      	beq.n	80018b8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001884:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001888:	4a2a      	ldr	r2, [pc, #168]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 800188a:	f043 0301 	orr.w	r3, r3, #1
 800188e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff faa0 	bl	8000dd4 <HAL_GetTick>
 8001894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001898:	f7ff fa9c 	bl	8000dd4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e21a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x45c>
 80018b6:	e018      	b.n	80018ea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa86 	bl	8000dd4 <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fa82 	bl	8000dd4 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e200      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018de:	4b15      	ldr	r3, [pc, #84]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0320 	and.w	r3, r3, #32
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d039      	beq.n	800196a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d01c      	beq.n	8001938 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a0c      	ldr	r2, [pc, #48]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001904:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001908:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800190a:	f7ff fa63 	bl	8000dd4 <HAL_GetTick>
 800190e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001912:	f7ff fa5f 	bl	8000dd4 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e1dd      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001924:	4b03      	ldr	r3, [pc, #12]	@ (8001934 <HAL_RCC_OscConfig+0x4f8>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x4d6>
 8001930:	e01b      	b.n	800196a <HAL_RCC_OscConfig+0x52e>
 8001932:	bf00      	nop
 8001934:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001938:	4b9b      	ldr	r3, [pc, #620]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a9a      	ldr	r2, [pc, #616]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 800193e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001942:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001944:	f7ff fa46 	bl	8000dd4 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194c:	f7ff fa42 	bl	8000dd4 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e1c0      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800195e:	4b92      	ldr	r3, [pc, #584]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0304 	and.w	r3, r3, #4
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 8081 	beq.w	8001a7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001978:	4b8c      	ldr	r3, [pc, #560]	@ (8001bac <HAL_RCC_OscConfig+0x770>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a8b      	ldr	r2, [pc, #556]	@ (8001bac <HAL_RCC_OscConfig+0x770>)
 800197e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001982:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001984:	f7ff fa26 	bl	8000dd4 <HAL_GetTick>
 8001988:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800198a:	e008      	b.n	800199e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff fa22 	bl	8000dd4 <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	2b64      	cmp	r3, #100	@ 0x64
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e1a0      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800199e:	4b83      	ldr	r3, [pc, #524]	@ (8001bac <HAL_RCC_OscConfig+0x770>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d0f0      	beq.n	800198c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x584>
 80019b2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019b6:	4a7c      	ldr	r2, [pc, #496]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80019be:	e02d      	b.n	8001a1c <HAL_RCC_OscConfig+0x5e0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d10c      	bne.n	80019e2 <HAL_RCC_OscConfig+0x5a6>
 80019c8:	4b77      	ldr	r3, [pc, #476]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019cc:	4a76      	ldr	r2, [pc, #472]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80019d4:	4b74      	ldr	r3, [pc, #464]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019d8:	4a73      	ldr	r2, [pc, #460]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019da:	f023 0304 	bic.w	r3, r3, #4
 80019de:	6713      	str	r3, [r2, #112]	@ 0x70
 80019e0:	e01c      	b.n	8001a1c <HAL_RCC_OscConfig+0x5e0>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b05      	cmp	r3, #5
 80019e8:	d10c      	bne.n	8001a04 <HAL_RCC_OscConfig+0x5c8>
 80019ea:	4b6f      	ldr	r3, [pc, #444]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ee:	4a6e      	ldr	r2, [pc, #440]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f6:	4b6c      	ldr	r3, [pc, #432]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019fa:	4a6b      	ldr	r2, [pc, #428]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a02:	e00b      	b.n	8001a1c <HAL_RCC_OscConfig+0x5e0>
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a08:	4a67      	ldr	r2, [pc, #412]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a0a:	f023 0301 	bic.w	r3, r3, #1
 8001a0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a10:	4b65      	ldr	r3, [pc, #404]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a14:	4a64      	ldr	r2, [pc, #400]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a16:	f023 0304 	bic.w	r3, r3, #4
 8001a1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d015      	beq.n	8001a50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f9d6 	bl	8000dd4 <HAL_GetTick>
 8001a28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a2a:	e00a      	b.n	8001a42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2c:	f7ff f9d2 	bl	8000dd4 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e14e      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a42:	4b59      	ldr	r3, [pc, #356]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d0ee      	beq.n	8001a2c <HAL_RCC_OscConfig+0x5f0>
 8001a4e:	e014      	b.n	8001a7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9c0 	bl	8000dd4 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a56:	e00a      	b.n	8001a6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a58:	f7ff f9bc 	bl	8000dd4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e138      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a6e:	4b4e      	ldr	r3, [pc, #312]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d1ee      	bne.n	8001a58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f000 812d 	beq.w	8001cde <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001a84:	4b48      	ldr	r3, [pc, #288]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a8c:	2b18      	cmp	r3, #24
 8001a8e:	f000 80bd 	beq.w	8001c0c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	f040 809e 	bne.w	8001bd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	4b42      	ldr	r3, [pc, #264]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a41      	ldr	r2, [pc, #260]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001aa2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff f994 	bl	8000dd4 <HAL_GetTick>
 8001aac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ab0:	f7ff f990 	bl	8000dd4 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e10e      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ac2:	4b39      	ldr	r3, [pc, #228]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ace:	4b36      	ldr	r3, [pc, #216]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ad2:	4b37      	ldr	r3, [pc, #220]	@ (8001bb0 <HAL_RCC_OscConfig+0x774>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	430a      	orrs	r2, r1
 8001ae2:	4931      	ldr	r1, [pc, #196]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aec:	3b01      	subs	r3, #1
 8001aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af6:	3b01      	subs	r3, #1
 8001af8:	025b      	lsls	r3, r3, #9
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	431a      	orrs	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b02:	3b01      	subs	r3, #1
 8001b04:	041b      	lsls	r3, r3, #16
 8001b06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b10:	3b01      	subs	r3, #1
 8001b12:	061b      	lsls	r3, r3, #24
 8001b14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b18:	4923      	ldr	r1, [pc, #140]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	4a21      	ldr	r2, [pc, #132]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2e:	4b21      	ldr	r3, [pc, #132]	@ (8001bb4 <HAL_RCC_OscConfig+0x778>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b36:	00d2      	lsls	r2, r2, #3
 8001b38:	491b      	ldr	r1, [pc, #108]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b42:	f023 020c 	bic.w	r2, r3, #12
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4917      	ldr	r1, [pc, #92]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b50:	4b15      	ldr	r3, [pc, #84]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b54:	f023 0202 	bic.w	r2, r3, #2
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5c:	4912      	ldr	r1, [pc, #72]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b62:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b66:	4a10      	ldr	r2, [pc, #64]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b8a:	4a07      	ldr	r2, [pc, #28]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b92:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a04      	ldr	r2, [pc, #16]	@ (8001ba8 <HAL_RCC_OscConfig+0x76c>)
 8001b98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9e:	f7ff f919 	bl	8000dd4 <HAL_GetTick>
 8001ba2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ba4:	e011      	b.n	8001bca <HAL_RCC_OscConfig+0x78e>
 8001ba6:	bf00      	nop
 8001ba8:	58024400 	.word	0x58024400
 8001bac:	58024800 	.word	0x58024800
 8001bb0:	fffffc0c 	.word	0xfffffc0c
 8001bb4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb8:	f7ff f90c 	bl	8000dd4 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e08a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bca:	4b47      	ldr	r3, [pc, #284]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d0f0      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x77c>
 8001bd6:	e082      	b.n	8001cde <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b43      	ldr	r3, [pc, #268]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a42      	ldr	r2, [pc, #264]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7ff f8f6 	bl	8000dd4 <HAL_GetTick>
 8001be8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f8f2 	bl	8000dd4 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e070      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001bfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x7b0>
 8001c0a:	e068      	b.n	8001cde <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c12:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d031      	beq.n	8001c84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	f003 0203 	and.w	r2, r3, #3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d12a      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d122      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d11a      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	0a5b      	lsrs	r3, r3, #9
 8001c52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d111      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	0c1b      	lsrs	r3, r3, #16
 8001c64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d108      	bne.n	8001c84 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	0e1b      	lsrs	r3, r3, #24
 8001c76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e02b      	b.n	8001ce0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001c88:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001c92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d01f      	beq.n	8001cde <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c9e:	4b12      	ldr	r3, [pc, #72]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca2:	4a11      	ldr	r2, [pc, #68]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001caa:	f7ff f893 	bl	8000dd4 <HAL_GetTick>
 8001cae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001cb0:	bf00      	nop
 8001cb2:	f7ff f88f 	bl	8000dd4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d0f9      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_RCC_OscConfig+0x8b0>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cca:	00d2      	lsls	r2, r2, #3
 8001ccc:	4906      	ldr	r1, [pc, #24]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001cd2:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	4a04      	ldr	r2, [pc, #16]	@ (8001ce8 <HAL_RCC_OscConfig+0x8ac>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001cde:	2300      	movs	r3, #0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3730      	adds	r7, #48	@ 0x30
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	58024400 	.word	0x58024400
 8001cec:	ffff0007 	.word	0xffff0007

08001cf0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d101      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e19c      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d04:	4b8a      	ldr	r3, [pc, #552]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 030f 	and.w	r3, r3, #15
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d910      	bls.n	8001d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d12:	4b87      	ldr	r3, [pc, #540]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f023 020f 	bic.w	r2, r3, #15
 8001d1a:	4985      	ldr	r1, [pc, #532]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	4b83      	ldr	r3, [pc, #524]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 030f 	and.w	r3, r3, #15
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d001      	beq.n	8001d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e184      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	4b7b      	ldr	r3, [pc, #492]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d908      	bls.n	8001d62 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d50:	4b78      	ldr	r3, [pc, #480]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	691b      	ldr	r3, [r3, #16]
 8001d5c:	4975      	ldr	r1, [pc, #468]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0308 	and.w	r3, r3, #8
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	695a      	ldr	r2, [r3, #20]
 8001d72:	4b70      	ldr	r3, [pc, #448]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d74:	69db      	ldr	r3, [r3, #28]
 8001d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d908      	bls.n	8001d90 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d80:	69db      	ldr	r3, [r3, #28]
 8001d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	496a      	ldr	r1, [pc, #424]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0310 	and.w	r3, r3, #16
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d010      	beq.n	8001dbe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	699a      	ldr	r2, [r3, #24]
 8001da0:	4b64      	ldr	r3, [pc, #400]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001da2:	69db      	ldr	r3, [r3, #28]
 8001da4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d908      	bls.n	8001dbe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001dac:	4b61      	ldr	r3, [pc, #388]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	495e      	ldr	r1, [pc, #376]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0320 	and.w	r3, r3, #32
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d010      	beq.n	8001dec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	69da      	ldr	r2, [r3, #28]
 8001dce:	4b59      	ldr	r3, [pc, #356]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d908      	bls.n	8001dec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001dda:	4b56      	ldr	r3, [pc, #344]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	4953      	ldr	r1, [pc, #332]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d010      	beq.n	8001e1a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68da      	ldr	r2, [r3, #12]
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d908      	bls.n	8001e1a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e08:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f023 020f 	bic.w	r2, r3, #15
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	4947      	ldr	r1, [pc, #284]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e16:	4313      	orrs	r3, r2
 8001e18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0301 	and.w	r3, r3, #1
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d055      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e26:	4b43      	ldr	r3, [pc, #268]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	4940      	ldr	r1, [pc, #256]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e40:	4b3c      	ldr	r3, [pc, #240]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d121      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0f6      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e58:	4b36      	ldr	r3, [pc, #216]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d115      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e0ea      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e70:	4b30      	ldr	r3, [pc, #192]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0de      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e80:	4b2c      	ldr	r3, [pc, #176]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e0d6      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e90:	4b28      	ldr	r3, [pc, #160]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	f023 0207 	bic.w	r2, r3, #7
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4925      	ldr	r1, [pc, #148]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea2:	f7fe ff97 	bl	8000dd4 <HAL_GetTick>
 8001ea6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eaa:	f7fe ff93 	bl	8000dd4 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e0be      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec0:	4b1c      	ldr	r3, [pc, #112]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d1eb      	bne.n	8001eaa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d010      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	4b14      	ldr	r3, [pc, #80]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d208      	bcs.n	8001f00 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eee:	4b11      	ldr	r3, [pc, #68]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f023 020f 	bic.w	r2, r3, #15
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	490e      	ldr	r1, [pc, #56]	@ (8001f34 <HAL_RCC_ClockConfig+0x244>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f00:	4b0b      	ldr	r3, [pc, #44]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d214      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0e:	4b08      	ldr	r3, [pc, #32]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f023 020f 	bic.w	r2, r3, #15
 8001f16:	4906      	ldr	r1, [pc, #24]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b04      	ldr	r3, [pc, #16]	@ (8001f30 <HAL_RCC_ClockConfig+0x240>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 030f 	and.w	r3, r3, #15
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d005      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e086      	b.n	800203e <HAL_RCC_ClockConfig+0x34e>
 8001f30:	52002000 	.word	0x52002000
 8001f34:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d010      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	691a      	ldr	r2, [r3, #16]
 8001f48:	4b3f      	ldr	r3, [pc, #252]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d208      	bcs.n	8001f66 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f54:	4b3c      	ldr	r3, [pc, #240]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	4939      	ldr	r1, [pc, #228]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695a      	ldr	r2, [r3, #20]
 8001f76:	4b34      	ldr	r3, [pc, #208]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d208      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f82:	4b31      	ldr	r3, [pc, #196]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	695b      	ldr	r3, [r3, #20]
 8001f8e:	492e      	ldr	r1, [pc, #184]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d010      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699a      	ldr	r2, [r3, #24]
 8001fa4:	4b28      	ldr	r3, [pc, #160]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fa6:	69db      	ldr	r3, [r3, #28]
 8001fa8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d208      	bcs.n	8001fc2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fb0:	4b25      	ldr	r3, [pc, #148]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	4922      	ldr	r1, [pc, #136]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0320 	and.w	r3, r3, #32
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d010      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	69da      	ldr	r2, [r3, #28]
 8001fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fd4:	6a1b      	ldr	r3, [r3, #32]
 8001fd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d208      	bcs.n	8001ff0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fde:	4b1a      	ldr	r3, [pc, #104]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	4917      	ldr	r1, [pc, #92]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001fec:	4313      	orrs	r3, r2
 8001fee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001ff0:	f000 f89e 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	4b14      	ldr	r3, [pc, #80]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	0a1b      	lsrs	r3, r3, #8
 8001ffc:	f003 030f 	and.w	r3, r3, #15
 8002000:	4912      	ldr	r1, [pc, #72]	@ (800204c <HAL_RCC_ClockConfig+0x35c>)
 8002002:	5ccb      	ldrb	r3, [r1, r3]
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800200e:	4b0e      	ldr	r3, [pc, #56]	@ (8002048 <HAL_RCC_ClockConfig+0x358>)
 8002010:	699b      	ldr	r3, [r3, #24]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a0d      	ldr	r2, [pc, #52]	@ (800204c <HAL_RCC_ClockConfig+0x35c>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	f003 031f 	and.w	r3, r3, #31
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
 8002024:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <HAL_RCC_ClockConfig+0x360>)
 8002026:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002028:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <HAL_RCC_ClockConfig+0x364>)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_RCC_ClockConfig+0x368>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fe84 	bl	8000d40 <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	58024400 	.word	0x58024400
 800204c:	080053dc 	.word	0x080053dc
 8002050:	24000004 	.word	0x24000004
 8002054:	24000000 	.word	0x24000000
 8002058:	24000008 	.word	0x24000008

0800205c <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08c      	sub	sp, #48	@ 0x30
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d12a      	bne.n	80020c4 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800206e:	4b2d      	ldr	r3, [pc, #180]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002074:	4a2b      	ldr	r2, [pc, #172]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800207e:	4b29      	ldr	r3, [pc, #164]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800208c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002092:	2302      	movs	r3, #2
 8002094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002096:	2303      	movs	r3, #3
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	2300      	movs	r3, #0
 800209c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800209e:	2300      	movs	r3, #0
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80020a2:	f107 031c 	add.w	r3, r7, #28
 80020a6:	4619      	mov	r1, r3
 80020a8:	481f      	ldr	r0, [pc, #124]	@ (8002128 <HAL_RCC_MCOConfig+0xcc>)
 80020aa:	f7fe ff8f 	bl	8000fcc <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80020ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	4919      	ldr	r1, [pc, #100]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020be:	4313      	orrs	r3, r2
 80020c0:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80020c2:	e02a      	b.n	800211a <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80020c4:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020ca:	4a16      	ldr	r2, [pc, #88]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020cc:	f043 0304 	orr.w	r3, r3, #4
 80020d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020d4:	4b13      	ldr	r3, [pc, #76]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 80020d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	617b      	str	r3, [r7, #20]
 80020e0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80020e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ec:	2303      	movs	r3, #3
 80020ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	480b      	ldr	r0, [pc, #44]	@ (800212c <HAL_RCC_MCOConfig+0xd0>)
 8002100:	f7fe ff64 	bl	8000fcc <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8002104:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	01d9      	lsls	r1, r3, #7
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	430b      	orrs	r3, r1
 8002114:	4903      	ldr	r1, [pc, #12]	@ (8002124 <HAL_RCC_MCOConfig+0xc8>)
 8002116:	4313      	orrs	r3, r2
 8002118:	610b      	str	r3, [r1, #16]
}
 800211a:	bf00      	nop
 800211c:	3730      	adds	r7, #48	@ 0x30
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	58024400 	.word	0x58024400
 8002128:	58020000 	.word	0x58020000
 800212c:	58020800 	.word	0x58020800

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002136:	4bb3      	ldr	r3, [pc, #716]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800213e:	2b18      	cmp	r3, #24
 8002140:	f200 8155 	bhi.w	80023ee <HAL_RCC_GetSysClockFreq+0x2be>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	080021b1 	.word	0x080021b1
 8002150:	080023ef 	.word	0x080023ef
 8002154:	080023ef 	.word	0x080023ef
 8002158:	080023ef 	.word	0x080023ef
 800215c:	080023ef 	.word	0x080023ef
 8002160:	080023ef 	.word	0x080023ef
 8002164:	080023ef 	.word	0x080023ef
 8002168:	080023ef 	.word	0x080023ef
 800216c:	080021d7 	.word	0x080021d7
 8002170:	080023ef 	.word	0x080023ef
 8002174:	080023ef 	.word	0x080023ef
 8002178:	080023ef 	.word	0x080023ef
 800217c:	080023ef 	.word	0x080023ef
 8002180:	080023ef 	.word	0x080023ef
 8002184:	080023ef 	.word	0x080023ef
 8002188:	080023ef 	.word	0x080023ef
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080023ef 	.word	0x080023ef
 8002194:	080023ef 	.word	0x080023ef
 8002198:	080023ef 	.word	0x080023ef
 800219c:	080023ef 	.word	0x080023ef
 80021a0:	080023ef 	.word	0x080023ef
 80021a4:	080023ef 	.word	0x080023ef
 80021a8:	080023ef 	.word	0x080023ef
 80021ac:	080021e3 	.word	0x080021e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021b0:	4b94      	ldr	r3, [pc, #592]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021bc:	4b91      	ldr	r3, [pc, #580]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	4a90      	ldr	r2, [pc, #576]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021ce:	e111      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021d2:	61bb      	str	r3, [r7, #24]
      break;
 80021d4:	e10e      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021d6:	4b8d      	ldr	r3, [pc, #564]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021d8:	61bb      	str	r3, [r7, #24]
      break;
 80021da:	e10b      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021de:	61bb      	str	r3, [r7, #24]
      break;
 80021e0:	e108      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021e2:	4b88      	ldr	r3, [pc, #544]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021ec:	4b85      	ldr	r3, [pc, #532]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021f8:	4b82      	ldr	r3, [pc, #520]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002202:	4b80      	ldr	r3, [pc, #512]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80e1 	beq.w	80023e8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b02      	cmp	r3, #2
 800222a:	f000 8083 	beq.w	8002334 <HAL_RCC_GetSysClockFreq+0x204>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f200 80a1 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x248>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x114>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d056      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002242:	e099      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002244:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02d      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002250:	4b6c      	ldr	r3, [pc, #432]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	4a6b      	ldr	r2, [pc, #428]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227a:	4b62      	ldr	r3, [pc, #392]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228a:	ed97 6a02 	vldr	s12, [r7, #8]
 800228e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800229a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800229e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022aa:	e087      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002418 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022be:	4b51      	ldr	r3, [pc, #324]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ee:	e065      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2ec>
 80022fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002302:	4b40      	ldr	r3, [pc, #256]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002312:	ed97 6a02 	vldr	s12, [r7, #8]
 8002316:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800231a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800231e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002332:	e043      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002420 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002356:	ed97 6a02 	vldr	s12, [r7, #8]
 800235a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800235e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800236a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800236e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002376:	e021      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002382:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800239a:	ed97 6a02 	vldr	s12, [r7, #8]
 800239e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	0a5b      	lsrs	r3, r3, #9
 80023c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023c6:	3301      	adds	r3, #1
 80023c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80023d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
      break;
 80023ec:	e002      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023f0:	61bb      	str	r3, [r7, #24]
      break;
 80023f2:	bf00      	nop
  }

  return sysclockfreq;
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	58024400 	.word	0x58024400
 8002408:	03d09000 	.word	0x03d09000
 800240c:	003d0900 	.word	0x003d0900
 8002410:	017d7840 	.word	0x017d7840
 8002414:	46000000 	.word	0x46000000
 8002418:	4c742400 	.word	0x4c742400
 800241c:	4a742400 	.word	0x4a742400
 8002420:	4bbebc20 	.word	0x4bbebc20

08002424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800242a:	f7ff fe81 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800242e:	4602      	mov	r2, r0
 8002430:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x50>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	490f      	ldr	r1, [pc, #60]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x54>)
 800243c:	5ccb      	ldrb	r3, [r1, r3]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002448:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x50>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x54>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_RCC_GetHCLKFreq+0x58>)
 8002460:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002462:	4a07      	ldr	r2, [pc, #28]	@ (8002480 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_RCC_GetHCLKFreq+0x58>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	080053dc 	.word	0x080053dc
 800247c:	24000004 	.word	0x24000004
 8002480:	24000000 	.word	0x24000000

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002488:	f7ff ffcc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4904      	ldr	r1, [pc, #16]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	58024400 	.word	0x58024400
 80024ac:	080053dc 	.word	0x080053dc

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80024b4:	f7ff ffb6 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4904      	ldr	r1, [pc, #16]	@ (80024d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	58024400 	.word	0x58024400
 80024d8:	080053dc 	.word	0x080053dc

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b0cc      	sub	sp, #304	@ 0x130
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002500:	2500      	movs	r5, #0
 8002502:	ea54 0305 	orrs.w	r3, r4, r5
 8002506:	d049      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002508:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800250c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800250e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002512:	d02f      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002514:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002518:	d828      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800251a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800251e:	d01a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002520:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002524:	d822      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800252a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800252e:	d007      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002530:	e01c      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002532:	4bb8      	ldr	r3, [pc, #736]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	4ab7      	ldr	r2, [pc, #732]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800253e:	e01a      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002544:	3308      	adds	r3, #8
 8002546:	2102      	movs	r1, #2
 8002548:	4618      	mov	r0, r3
 800254a:	f001 fccf 	bl	8003eec <RCCEx_PLL2_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002554:	e00f      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800255a:	3328      	adds	r3, #40	@ 0x28
 800255c:	2102      	movs	r1, #2
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fd76 	bl	8004050 <RCCEx_PLL3_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800256a:	e004      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002572:	e000      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002576:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800257e:	4ba5      	ldr	r3, [pc, #660]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002586:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800258a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800258c:	4aa1      	ldr	r2, [pc, #644]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800258e:	430b      	orrs	r3, r1
 8002590:	6513      	str	r3, [r2, #80]	@ 0x50
 8002592:	e003      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002594:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002598:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800259c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80025a8:	f04f 0900 	mov.w	r9, #0
 80025ac:	ea58 0309 	orrs.w	r3, r8, r9
 80025b0:	d047      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80025b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d82a      	bhi.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80025bc:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d9 	.word	0x080025d9
 80025c8:	080025e7 	.word	0x080025e7
 80025cc:	080025fd 	.word	0x080025fd
 80025d0:	0800261b 	.word	0x0800261b
 80025d4:	0800261b 	.word	0x0800261b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	4a8d      	ldr	r2, [pc, #564]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025e4:	e01a      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025ea:	3308      	adds	r3, #8
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fc7c 	bl	8003eec <RCCEx_PLL2_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025fa:	e00f      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002600:	3328      	adds	r3, #40	@ 0x28
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fd23 	bl	8004050 <RCCEx_PLL3_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002610:	e004      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002618:	e000      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800261a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800261c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002624:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002628:	f023 0107 	bic.w	r1, r3, #7
 800262c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002630:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002632:	4a78      	ldr	r2, [pc, #480]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	430b      	orrs	r3, r1
 8002636:	6513      	str	r3, [r2, #80]	@ 0x50
 8002638:	e003      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800263e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800264e:	f04f 0b00 	mov.w	fp, #0
 8002652:	ea5a 030b 	orrs.w	r3, sl, fp
 8002656:	d04c      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800265c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002662:	d030      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002668:	d829      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800266a:	2bc0      	cmp	r3, #192	@ 0xc0
 800266c:	d02d      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800266e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002670:	d825      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002672:	2b80      	cmp	r3, #128	@ 0x80
 8002674:	d018      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002676:	2b80      	cmp	r3, #128	@ 0x80
 8002678:	d821      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800267e:	2b40      	cmp	r3, #64	@ 0x40
 8002680:	d007      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002682:	e01c      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002684:	4b63      	ldr	r3, [pc, #396]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	4a62      	ldr	r2, [pc, #392]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800268e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002690:	e01c      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002692:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002696:	3308      	adds	r3, #8
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fc26 	bl	8003eec <RCCEx_PLL2_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026a6:	e011      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026ac:	3328      	adds	r3, #40	@ 0x28
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 fccd 	bl	8004050 <RCCEx_PLL3_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026bc:	e006      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80026c4:	e002      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80026d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80026dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80026e8:	e003      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80026ee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80026fe:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002708:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800270c:	460b      	mov	r3, r1
 800270e:	4313      	orrs	r3, r2
 8002710:	d053      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002712:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002716:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800271a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800271e:	d035      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002720:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002724:	d82e      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002726:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800272a:	d031      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800272c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002730:	d828      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002736:	d01a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800273c:	d822      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002746:	d007      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002748:	e01c      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800274a:	4b32      	ldr	r3, [pc, #200]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274e:	4a31      	ldr	r2, [pc, #196]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002756:	e01c      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002758:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800275c:	3308      	adds	r3, #8
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fbc3 	bl	8003eec <RCCEx_PLL2_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800276c:	e011      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800276e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002772:	3328      	adds	r3, #40	@ 0x28
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fc6a 	bl	8004050 <RCCEx_PLL3_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002782:	e006      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800278a:	e002      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002792:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800279a:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80027a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80027aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b0:	e003      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027b6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80027c6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80027d0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80027d4:	460b      	mov	r3, r1
 80027d6:	4313      	orrs	r3, r2
 80027d8:	d056      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80027da:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80027e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e6:	d038      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80027e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ec:	d831      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027f2:	d034      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80027f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027f8:	d82b      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027fe:	d01d      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002804:	d825      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800280a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002810:	e01f      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002818:	4ba2      	ldr	r3, [pc, #648]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	4aa1      	ldr	r2, [pc, #644]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800281e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002824:	e01c      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800282a:	3308      	adds	r3, #8
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fb5c 	bl	8003eec <RCCEx_PLL2_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800283a:	e011      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800283c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002840:	3328      	adds	r3, #40	@ 0x28
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fc03 	bl	8004050 <RCCEx_PLL3_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002850:	e006      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002858:	e002      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800285e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002860:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002868:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002870:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002878:	4a8a      	ldr	r2, [pc, #552]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800287a:	430b      	orrs	r3, r1
 800287c:	6593      	str	r3, [r2, #88]	@ 0x58
 800287e:	e003      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002880:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002884:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002888:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002894:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800289e:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80028a2:	460b      	mov	r3, r1
 80028a4:	4313      	orrs	r3, r2
 80028a6:	d03a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80028a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	2b30      	cmp	r3, #48	@ 0x30
 80028b0:	d01f      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80028b2:	2b30      	cmp	r3, #48	@ 0x30
 80028b4:	d819      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d00c      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d815      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d111      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028c6:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	4a76      	ldr	r2, [pc, #472]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028d2:	e011      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028d8:	3308      	adds	r3, #8
 80028da:	2102      	movs	r1, #2
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fb05 	bl	8003eec <RCCEx_PLL2_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002900:	4b68      	ldr	r3, [pc, #416]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002904:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002908:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	4a65      	ldr	r2, [pc, #404]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002910:	430b      	orrs	r3, r1
 8002912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002914:	e003      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002916:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800291a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800291e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800292a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002934:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002938:	460b      	mov	r3, r1
 800293a:	4313      	orrs	r3, r2
 800293c:	d051      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800293e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002942:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002948:	d035      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800294a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800294e:	d82e      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002950:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002954:	d031      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002956:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800295a:	d828      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002960:	d01a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002966:	d822      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002970:	d007      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002972:	e01c      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800297e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002980:	e01c      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002986:	3308      	adds	r3, #8
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f001 faae 	bl	8003eec <RCCEx_PLL2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002996:	e011      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002998:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800299c:	3328      	adds	r3, #40	@ 0x28
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fb55 	bl	8004050 <RCCEx_PLL3_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80029b4:	e002      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029c4:	4b37      	ldr	r3, [pc, #220]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80029cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029d2:	4a34      	ldr	r2, [pc, #208]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80029d8:	e003      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80029ee:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80029f8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80029fc:	460b      	mov	r3, r1
 80029fe:	4313      	orrs	r3, r2
 8002a00:	d056      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a0c:	d033      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a12:	d82c      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a18:	d02f      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a1e:	d826      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a24:	d02b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a2a:	d820      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a30:	d012      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a36:	d81a      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d022      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a40:	d115      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a46:	3308      	adds	r3, #8
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 fa4e 	bl	8003eec <RCCEx_PLL2_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a56:	e015      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a5c:	3328      	adds	r3, #40	@ 0x28
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 faf5 	bl	8004050 <RCCEx_PLL3_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002a74:	e006      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a76:	bf00      	nop
 8002a78:	e004      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a7a:	bf00      	nop
 8002a7c:	e002      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a98:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002a9a:	4a02      	ldr	r2, [pc, #8]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aa0:	e006      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002aa2:	bf00      	nop
 8002aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002aac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ab0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002abc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002ac6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002aca:	460b      	mov	r3, r1
 8002acc:	4313      	orrs	r3, r2
 8002ace:	d055      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ad0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002adc:	d033      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae2:	d82c      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae8:	d02f      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aee:	d826      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002af0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002af4:	d02b      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002af6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002afa:	d820      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b00:	d012      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b06:	d81a      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d022      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b10:	d115      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b16:	3308      	adds	r3, #8
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 f9e6 	bl	8003eec <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b26:	e015      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b2c:	3328      	adds	r3, #40	@ 0x28
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fa8d 	bl	8004050 <RCCEx_PLL3_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b44:	e006      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b46:	bf00      	nop
 8002b48:	e004      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b54:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b5c:	4bb6      	ldr	r3, [pc, #728]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002b64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b68:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002b6c:	4ab2      	ldr	r2, [pc, #712]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b78:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002b7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002b88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002b92:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	d02a      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002b9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ba0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d011      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002baa:	d10a      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	3308      	adds	r3, #8
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f001 f999 	bl	8003eec <RCCEx_PLL2_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002bc0:	e004      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002bc8:	e000      	b.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bcc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002bd4:	4b98      	ldr	r3, [pc, #608]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002bd8:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002bdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002be2:	4a95      	ldr	r2, [pc, #596]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002be4:	430b      	orrs	r3, r1
 8002be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002be8:	e003      	b.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002bee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002bf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bfa:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002c02:	2300      	movs	r3, #0
 8002c04:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002c08:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	d037      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002c12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c1c:	d00e      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c22:	d816      	bhi.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d018      	beq.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002c28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c2c:	d111      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c2e:	4b82      	ldr	r3, [pc, #520]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c32:	4a81      	ldr	r2, [pc, #516]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c3a:	e00f      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c40:	3308      	adds	r3, #8
 8002c42:	2101      	movs	r1, #1
 8002c44:	4618      	mov	r0, r3
 8002c46:	f001 f951 	bl	8003eec <RCCEx_PLL2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002c50:	e004      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c58:	e000      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002c5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c5c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10a      	bne.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c64:	4b74      	ldr	r3, [pc, #464]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c68:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002c6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c72:	4a71      	ldr	r2, [pc, #452]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c74:	430b      	orrs	r3, r1
 8002c76:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c78:	e003      	b.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002c8e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c92:	2300      	movs	r3, #0
 8002c94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002c98:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	d03a      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002ca2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ca6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ca8:	2b03      	cmp	r3, #3
 8002caa:	d81d      	bhi.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002cac:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb2:	bf00      	nop
 8002cb4:	08002cf1 	.word	0x08002cf1
 8002cb8:	08002cc5 	.word	0x08002cc5
 8002cbc:	08002cd3 	.word	0x08002cd3
 8002cc0:	08002cf1 	.word	0x08002cf1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cc4:	4b5c      	ldr	r3, [pc, #368]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc8:	4a5b      	ldr	r2, [pc, #364]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002cd0:	e00f      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cd6:	3308      	adds	r3, #8
 8002cd8:	2102      	movs	r1, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f001 f906 	bl	8003eec <RCCEx_PLL2_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ce6:	e004      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002cee:	e000      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002cf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cf2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d10a      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002cfa:	4b4f      	ldr	r3, [pc, #316]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cfe:	f023 0103 	bic.w	r1, r3, #3
 8002d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d08:	4a4b      	ldr	r2, [pc, #300]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d0a:	430b      	orrs	r3, r1
 8002d0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002d0e:	e003      	b.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d14:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002d24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002d32:	460b      	mov	r3, r1
 8002d34:	4313      	orrs	r3, r2
 8002d36:	f000 80a0 	beq.w	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d3a:	4b40      	ldr	r3, [pc, #256]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d46:	f7fe f845 	bl	8000dd4 <HAL_GetTick>
 8002d4a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d4e:	e00b      	b.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fe f840 	bl	8000dd4 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b64      	cmp	r3, #100	@ 0x64
 8002d5e:	d903      	bls.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002d60:	2303      	movs	r3, #3
 8002d62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d66:	e005      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d68:	4b34      	ldr	r3, [pc, #208]	@ (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0ed      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002d74:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d17a      	bne.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d7c:	4b2e      	ldr	r3, [pc, #184]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002d88:	4053      	eors	r3, r2
 8002d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d015      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d92:	4b29      	ldr	r3, [pc, #164]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d9a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d9e:	4b26      	ldr	r3, [pc, #152]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002da2:	4a25      	ldr	r2, [pc, #148]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002da4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002da8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002daa:	4b23      	ldr	r3, [pc, #140]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dae:	4a22      	ldr	r2, [pc, #136]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002db6:	4a20      	ldr	r2, [pc, #128]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002db8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002dbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002dbe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dc2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002dc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dca:	d118      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dcc:	f7fe f802 	bl	8000dd4 <HAL_GetTick>
 8002dd0:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002dd4:	e00d      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd6:	f7fd fffd 	bl	8000dd4 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002de0:	1ad2      	subs	r2, r2, r3
 8002de2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d903      	bls.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002df0:	e005      	b.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df2:	4b11      	ldr	r3, [pc, #68]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002df4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0eb      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002dfe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d130      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e0a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e16:	d115      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002e18:	4b07      	ldr	r3, [pc, #28]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002e20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e24:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e28:	091a      	lsrs	r2, r3, #4
 8002e2a:	4b05      	ldr	r3, [pc, #20]	@ (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	4a02      	ldr	r2, [pc, #8]	@ (8002e38 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6113      	str	r3, [r2, #16]
 8002e34:	e00c      	b.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002e36:	bf00      	nop
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	58024800 	.word	0x58024800
 8002e40:	00ffffcf 	.word	0x00ffffcf
 8002e44:	4bd4      	ldr	r3, [pc, #848]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	4ad3      	ldr	r2, [pc, #844]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e4a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002e4e:	6113      	str	r3, [r2, #16]
 8002e50:	4bd1      	ldr	r3, [pc, #836]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e52:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002e54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e60:	4acd      	ldr	r2, [pc, #820]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002e62:	430b      	orrs	r3, r1
 8002e64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e66:	e008      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e68:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e6c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002e70:	e003      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e76:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e82:	f002 0301 	and.w	r3, r2, #1
 8002e86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e94:	460b      	mov	r3, r1
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f000 808b 	beq.w	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002ea4:	2b28      	cmp	r3, #40	@ 0x28
 8002ea6:	d86b      	bhi.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eae:	bf00      	nop
 8002eb0:	08002f89 	.word	0x08002f89
 8002eb4:	08002f81 	.word	0x08002f81
 8002eb8:	08002f81 	.word	0x08002f81
 8002ebc:	08002f81 	.word	0x08002f81
 8002ec0:	08002f81 	.word	0x08002f81
 8002ec4:	08002f81 	.word	0x08002f81
 8002ec8:	08002f81 	.word	0x08002f81
 8002ecc:	08002f81 	.word	0x08002f81
 8002ed0:	08002f55 	.word	0x08002f55
 8002ed4:	08002f81 	.word	0x08002f81
 8002ed8:	08002f81 	.word	0x08002f81
 8002edc:	08002f81 	.word	0x08002f81
 8002ee0:	08002f81 	.word	0x08002f81
 8002ee4:	08002f81 	.word	0x08002f81
 8002ee8:	08002f81 	.word	0x08002f81
 8002eec:	08002f81 	.word	0x08002f81
 8002ef0:	08002f6b 	.word	0x08002f6b
 8002ef4:	08002f81 	.word	0x08002f81
 8002ef8:	08002f81 	.word	0x08002f81
 8002efc:	08002f81 	.word	0x08002f81
 8002f00:	08002f81 	.word	0x08002f81
 8002f04:	08002f81 	.word	0x08002f81
 8002f08:	08002f81 	.word	0x08002f81
 8002f0c:	08002f81 	.word	0x08002f81
 8002f10:	08002f89 	.word	0x08002f89
 8002f14:	08002f81 	.word	0x08002f81
 8002f18:	08002f81 	.word	0x08002f81
 8002f1c:	08002f81 	.word	0x08002f81
 8002f20:	08002f81 	.word	0x08002f81
 8002f24:	08002f81 	.word	0x08002f81
 8002f28:	08002f81 	.word	0x08002f81
 8002f2c:	08002f81 	.word	0x08002f81
 8002f30:	08002f89 	.word	0x08002f89
 8002f34:	08002f81 	.word	0x08002f81
 8002f38:	08002f81 	.word	0x08002f81
 8002f3c:	08002f81 	.word	0x08002f81
 8002f40:	08002f81 	.word	0x08002f81
 8002f44:	08002f81 	.word	0x08002f81
 8002f48:	08002f81 	.word	0x08002f81
 8002f4c:	08002f81 	.word	0x08002f81
 8002f50:	08002f89 	.word	0x08002f89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f58:	3308      	adds	r3, #8
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f000 ffc5 	bl	8003eec <RCCEx_PLL2_Config>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f68:	e00f      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f6e:	3328      	adds	r3, #40	@ 0x28
 8002f70:	2101      	movs	r1, #1
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 f86c 	bl	8004050 <RCCEx_PLL3_Config>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f7e:	e004      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002f86:	e000      	b.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8002f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f8a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10b      	bne.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f92:	4b81      	ldr	r3, [pc, #516]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f96:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa2:	4a7d      	ldr	r2, [pc, #500]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002fa4:	430b      	orrs	r3, r1
 8002fa6:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fa8:	e003      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002faa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002fae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fba:	f002 0302 	and.w	r3, r2, #2
 8002fbe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002fc8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	d042      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002fd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002fd6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fd8:	2b05      	cmp	r3, #5
 8002fda:	d825      	bhi.n	8003028 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8002fdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe4 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8002fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe2:	bf00      	nop
 8002fe4:	08003031 	.word	0x08003031
 8002fe8:	08002ffd 	.word	0x08002ffd
 8002fec:	08003013 	.word	0x08003013
 8002ff0:	08003031 	.word	0x08003031
 8002ff4:	08003031 	.word	0x08003031
 8002ff8:	08003031 	.word	0x08003031
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ffc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003000:	3308      	adds	r3, #8
 8003002:	2101      	movs	r1, #1
 8003004:	4618      	mov	r0, r3
 8003006:	f000 ff71 	bl	8003eec <RCCEx_PLL2_Config>
 800300a:	4603      	mov	r3, r0
 800300c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003010:	e00f      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003012:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003016:	3328      	adds	r3, #40	@ 0x28
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f001 f818 	bl	8004050 <RCCEx_PLL3_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003026:	e004      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800302e:	e000      	b.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8003030:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003032:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003036:	2b00      	cmp	r3, #0
 8003038:	d10a      	bne.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800303a:	4b57      	ldr	r3, [pc, #348]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303e:	f023 0107 	bic.w	r1, r3, #7
 8003042:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003048:	4a53      	ldr	r2, [pc, #332]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800304a:	430b      	orrs	r3, r1
 800304c:	6553      	str	r3, [r2, #84]	@ 0x54
 800304e:	e003      	b.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003050:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003054:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	f002 0304 	and.w	r3, r2, #4
 8003064:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800306e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003072:	460b      	mov	r3, r1
 8003074:	4313      	orrs	r3, r2
 8003076:	d044      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003078:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800307c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003080:	2b05      	cmp	r3, #5
 8003082:	d825      	bhi.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003084:	a201      	add	r2, pc, #4	@ (adr r2, 800308c <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	080030d9 	.word	0x080030d9
 8003090:	080030a5 	.word	0x080030a5
 8003094:	080030bb 	.word	0x080030bb
 8003098:	080030d9 	.word	0x080030d9
 800309c:	080030d9 	.word	0x080030d9
 80030a0:	080030d9 	.word	0x080030d9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030a8:	3308      	adds	r3, #8
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 ff1d 	bl	8003eec <RCCEx_PLL2_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030b8:	e00f      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80030ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030be:	3328      	adds	r3, #40	@ 0x28
 80030c0:	2101      	movs	r1, #1
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 ffc4 	bl	8004050 <RCCEx_PLL3_Config>
 80030c8:	4603      	mov	r3, r0
 80030ca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80030ce:	e004      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80030d6:	e000      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80030d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e6:	f023 0107 	bic.w	r1, r3, #7
 80030ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80030f2:	4a29      	ldr	r2, [pc, #164]	@ (8003198 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030f4:	430b      	orrs	r3, r1
 80030f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80030f8:	e003      	b.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003102:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800310a:	f002 0320 	and.w	r3, r2, #32
 800310e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003112:	2300      	movs	r3, #0
 8003114:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003118:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800311c:	460b      	mov	r3, r1
 800311e:	4313      	orrs	r3, r2
 8003120:	d057      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003122:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003126:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800312a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800312e:	d035      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8003130:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003134:	d82c      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800313a:	d031      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800313c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003140:	d826      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003142:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003146:	d02d      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003148:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800314c:	d820      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800314e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003152:	d012      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003154:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003158:	d81a      	bhi.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800315a:	2b00      	cmp	r3, #0
 800315c:	d024      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800315e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003162:	d115      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003168:	3308      	adds	r3, #8
 800316a:	2100      	movs	r1, #0
 800316c:	4618      	mov	r0, r3
 800316e:	f000 febd 	bl	8003eec <RCCEx_PLL2_Config>
 8003172:	4603      	mov	r3, r0
 8003174:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003178:	e017      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800317a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800317e:	3328      	adds	r3, #40	@ 0x28
 8003180:	2102      	movs	r1, #2
 8003182:	4618      	mov	r0, r3
 8003184:	f000 ff64 	bl	8004050 <RCCEx_PLL3_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800318e:	e00c      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003196:	e008      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003198:	58024400 	.word	0x58024400
        break;
 800319c:	bf00      	nop
 800319e:	e004      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031a0:	bf00      	nop
 80031a2:	e002      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031a4:	bf00      	nop
 80031a6:	e000      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80031a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031aa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d10b      	bne.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031b2:	4bc2      	ldr	r3, [pc, #776]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80031ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031c2:	4abe      	ldr	r2, [pc, #760]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80031c4:	430b      	orrs	r3, r1
 80031c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80031c8:	e003      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80031d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031da:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80031de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80031e8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4313      	orrs	r3, r2
 80031f0:	d055      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80031f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031fa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80031fe:	d033      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8003200:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003204:	d82c      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003206:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800320a:	d02f      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800320c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003210:	d826      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003212:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003216:	d02b      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800321c:	d820      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800321e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003222:	d012      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003228:	d81a      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800322a:	2b00      	cmp	r3, #0
 800322c:	d022      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003232:	d115      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003238:	3308      	adds	r3, #8
 800323a:	2100      	movs	r1, #0
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fe55 	bl	8003eec <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003248:	e015      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800324a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800324e:	3328      	adds	r3, #40	@ 0x28
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fefc 	bl	8004050 <RCCEx_PLL3_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800325e:	e00a      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003266:	e006      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003268:	bf00      	nop
 800326a:	e004      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800326c:	bf00      	nop
 800326e:	e002      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003270:	bf00      	nop
 8003272:	e000      	b.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003276:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800327a:	2b00      	cmp	r3, #0
 800327c:	d10b      	bne.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800327e:	4b8f      	ldr	r3, [pc, #572]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003282:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003286:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800328a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800328e:	4a8b      	ldr	r2, [pc, #556]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003290:	430b      	orrs	r3, r1
 8003292:	6593      	str	r3, [r2, #88]	@ 0x58
 8003294:	e003      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003296:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800329a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800329e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032a6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80032aa:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80032ae:	2300      	movs	r3, #0
 80032b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80032b4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80032b8:	460b      	mov	r3, r1
 80032ba:	4313      	orrs	r3, r2
 80032bc:	d055      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80032be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80032c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032ca:	d033      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80032cc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80032d0:	d82c      	bhi.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032d6:	d02f      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80032d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032dc:	d826      	bhi.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032e2:	d02b      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80032e4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80032e8:	d820      	bhi.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032ee:	d012      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80032f0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80032f4:	d81a      	bhi.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d022      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80032fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80032fe:	d115      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003300:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003304:	3308      	adds	r3, #8
 8003306:	2100      	movs	r1, #0
 8003308:	4618      	mov	r0, r3
 800330a:	f000 fdef 	bl	8003eec <RCCEx_PLL2_Config>
 800330e:	4603      	mov	r3, r0
 8003310:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003314:	e015      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003316:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800331a:	3328      	adds	r3, #40	@ 0x28
 800331c:	2102      	movs	r1, #2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fe96 	bl	8004050 <RCCEx_PLL3_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800332a:	e00a      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003332:	e006      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003334:	bf00      	nop
 8003336:	e004      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003338:	bf00      	nop
 800333a:	e002      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800333c:	bf00      	nop
 800333e:	e000      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003340:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003342:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003346:	2b00      	cmp	r3, #0
 8003348:	d10b      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800334a:	4b5c      	ldr	r3, [pc, #368]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800334c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800334e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003356:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800335a:	4a58      	ldr	r2, [pc, #352]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800335c:	430b      	orrs	r3, r1
 800335e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003360:	e003      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003366:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800336a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f002 0308 	and.w	r3, r2, #8
 8003376:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800337a:	2300      	movs	r3, #0
 800337c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003380:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003384:	460b      	mov	r3, r1
 8003386:	4313      	orrs	r3, r2
 8003388:	d01e      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800338a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003396:	d10c      	bne.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339c:	3328      	adds	r3, #40	@ 0x28
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fe55 	bl	8004050 <RCCEx_PLL3_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d002      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80033b2:	4b42      	ldr	r3, [pc, #264]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033b6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80033ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c2:	4a3e      	ldr	r2, [pc, #248]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80033c4:	430b      	orrs	r3, r1
 80033c6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80033c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d0:	f002 0310 	and.w	r3, r2, #16
 80033d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80033d8:	2300      	movs	r3, #0
 80033da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80033de:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80033e2:	460b      	mov	r3, r1
 80033e4:	4313      	orrs	r3, r2
 80033e6:	d01e      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80033e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f4:	d10c      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80033f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033fa:	3328      	adds	r3, #40	@ 0x28
 80033fc:	2102      	movs	r1, #2
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fe26 	bl	8004050 <RCCEx_PLL3_Config>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003410:	4b2a      	ldr	r3, [pc, #168]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003414:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003418:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800341c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003420:	4a26      	ldr	r2, [pc, #152]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003422:	430b      	orrs	r3, r1
 8003424:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003426:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800342a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003432:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003436:	2300      	movs	r3, #0
 8003438:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800343c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003440:	460b      	mov	r3, r1
 8003442:	4313      	orrs	r3, r2
 8003444:	d040      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800344a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800344e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003452:	d022      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003458:	d81b      	bhi.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d003      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800345e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003462:	d00b      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003464:	e015      	b.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800346a:	3308      	adds	r3, #8
 800346c:	2100      	movs	r1, #0
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fd3c 	bl	8003eec <RCCEx_PLL2_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800347a:	e00f      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800347c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003480:	3328      	adds	r3, #40	@ 0x28
 8003482:	2102      	movs	r1, #2
 8003484:	4618      	mov	r0, r3
 8003486:	f000 fde3 	bl	8004050 <RCCEx_PLL3_Config>
 800348a:	4603      	mov	r3, r0
 800348c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003490:	e004      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003498:	e000      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800349a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d10d      	bne.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034a4:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034a8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80034ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034b0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034b4:	4a01      	ldr	r2, [pc, #4]	@ (80034bc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034b6:	430b      	orrs	r3, r1
 80034b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80034ba:	e005      	b.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80034bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80034c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80034d4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80034d6:	2300      	movs	r3, #0
 80034d8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80034da:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d03b      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034f0:	d01f      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80034f2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034f6:	d818      	bhi.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80034f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034fc:	d003      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80034fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003502:	d007      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003504:	e011      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003506:	4b64      	ldr	r3, [pc, #400]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	4a63      	ldr	r2, [pc, #396]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800350c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003512:	e00f      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003518:	3328      	adds	r3, #40	@ 0x28
 800351a:	2101      	movs	r1, #1
 800351c:	4618      	mov	r0, r3
 800351e:	f000 fd97 	bl	8004050 <RCCEx_PLL3_Config>
 8003522:	4603      	mov	r3, r0
 8003524:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003528:	e004      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003530:	e000      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8003532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003534:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800353c:	4b56      	ldr	r3, [pc, #344]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800353e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003540:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003544:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003548:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800354c:	4a52      	ldr	r2, [pc, #328]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800354e:	430b      	orrs	r3, r1
 8003550:	6553      	str	r3, [r2, #84]	@ 0x54
 8003552:	e003      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003554:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003558:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800355c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003568:	673b      	str	r3, [r7, #112]	@ 0x70
 800356a:	2300      	movs	r3, #0
 800356c:	677b      	str	r3, [r7, #116]	@ 0x74
 800356e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003572:	460b      	mov	r3, r1
 8003574:	4313      	orrs	r3, r2
 8003576:	d031      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800357c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8003582:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003586:	d007      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003588:	e011      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800358a:	4b43      	ldr	r3, [pc, #268]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800358c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800358e:	4a42      	ldr	r2, [pc, #264]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003594:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003596:	e00e      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800359c:	3308      	adds	r3, #8
 800359e:	2102      	movs	r1, #2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 fca3 	bl	8003eec <RCCEx_PLL2_Config>
 80035a6:	4603      	mov	r3, r0
 80035a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80035ac:	e003      	b.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80035b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10a      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80035be:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035c2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035cc:	4a32      	ldr	r2, [pc, #200]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80035dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80035e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035ea:	2300      	movs	r3, #0
 80035ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80035f2:	460b      	mov	r3, r1
 80035f4:	4313      	orrs	r3, r2
 80035f6:	d00c      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035fc:	3328      	adds	r3, #40	@ 0x28
 80035fe:	2102      	movs	r1, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f000 fd25 	bl	8004050 <RCCEx_PLL3_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d002      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003612:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800361e:	663b      	str	r3, [r7, #96]	@ 0x60
 8003620:	2300      	movs	r3, #0
 8003622:	667b      	str	r3, [r7, #100]	@ 0x64
 8003624:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003628:	460b      	mov	r3, r1
 800362a:	4313      	orrs	r3, r2
 800362c:	d03a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800362e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003632:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800363a:	d018      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800363c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003640:	d811      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8003642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003646:	d014      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800364c:	d80b      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d011      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8003652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003656:	d106      	bne.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003658:	4b0f      	ldr	r3, [pc, #60]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800365a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800365c:	4a0e      	ldr	r2, [pc, #56]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800365e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003664:	e008      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800366c:	e004      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003688:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800368c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003690:	4a01      	ldr	r2, [pc, #4]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6553      	str	r3, [r2, #84]	@ 0x54
 8003696:	e005      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036a0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80036b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036b2:	2300      	movs	r3, #0
 80036b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80036b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80036ba:	460b      	mov	r3, r1
 80036bc:	4313      	orrs	r3, r2
 80036be:	d009      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036c0:	4baa      	ldr	r3, [pc, #680]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80036c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80036ce:	4aa7      	ldr	r2, [pc, #668]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036d0:	430b      	orrs	r3, r1
 80036d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80036d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80036e0:	653b      	str	r3, [r7, #80]	@ 0x50
 80036e2:	2300      	movs	r3, #0
 80036e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80036e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80036ea:	460b      	mov	r3, r1
 80036ec:	4313      	orrs	r3, r2
 80036ee:	d00a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80036f0:	4b9e      	ldr	r3, [pc, #632]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80036f2:	691b      	ldr	r3, [r3, #16]
 80036f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80036f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036fc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003700:	4a9a      	ldr	r2, [pc, #616]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003702:	430b      	orrs	r3, r1
 8003704:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003706:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003712:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003714:	2300      	movs	r3, #0
 8003716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003718:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800371c:	460b      	mov	r3, r1
 800371e:	4313      	orrs	r3, r2
 8003720:	d009      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003722:	4b92      	ldr	r3, [pc, #584]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003726:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003730:	4a8e      	ldr	r2, [pc, #568]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003732:	430b      	orrs	r3, r1
 8003734:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003736:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800373a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003742:	643b      	str	r3, [r7, #64]	@ 0x40
 8003744:	2300      	movs	r3, #0
 8003746:	647b      	str	r3, [r7, #68]	@ 0x44
 8003748:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800374c:	460b      	mov	r3, r1
 800374e:	4313      	orrs	r3, r2
 8003750:	d00e      	beq.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003752:	4b86      	ldr	r3, [pc, #536]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	4a85      	ldr	r2, [pc, #532]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003758:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800375c:	6113      	str	r3, [r2, #16]
 800375e:	4b83      	ldr	r3, [pc, #524]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003760:	6919      	ldr	r1, [r3, #16]
 8003762:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003766:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800376a:	4a80      	ldr	r2, [pc, #512]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800376c:	430b      	orrs	r3, r1
 800376e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003770:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800377c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800377e:	2300      	movs	r3, #0
 8003780:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003782:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003786:	460b      	mov	r3, r1
 8003788:	4313      	orrs	r3, r2
 800378a:	d009      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800378c:	4b77      	ldr	r3, [pc, #476]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800378e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003790:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003794:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	4a74      	ldr	r2, [pc, #464]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800379c:	430b      	orrs	r3, r1
 800379e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80037a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80037ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80037ae:	2300      	movs	r3, #0
 80037b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80037b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80037b6:	460b      	mov	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	d00a      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80037bc:	4b6b      	ldr	r3, [pc, #428]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80037c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80037cc:	4a67      	ldr	r2, [pc, #412]	@ (800396c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037ce:	430b      	orrs	r3, r1
 80037d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80037d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	2100      	movs	r1, #0
 80037dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80037e8:	460b      	mov	r3, r1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	d011      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f2:	3308      	adds	r3, #8
 80037f4:	2100      	movs	r1, #0
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fb78 	bl	8003eec <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003802:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800380e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003812:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	2100      	movs	r1, #0
 800381c:	6239      	str	r1, [r7, #32]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	627b      	str	r3, [r7, #36]	@ 0x24
 8003824:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d011      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800382e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003832:	3308      	adds	r3, #8
 8003834:	2101      	movs	r1, #1
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fb58 	bl	8003eec <RCCEx_PLL2_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003842:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800384e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	2100      	movs	r1, #0
 800385c:	61b9      	str	r1, [r7, #24]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d011      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800386e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003872:	3308      	adds	r3, #8
 8003874:	2102      	movs	r1, #2
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fb38 	bl	8003eec <RCCEx_PLL2_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003882:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800388e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	2100      	movs	r1, #0
 800389c:	6139      	str	r1, [r7, #16]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d011      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038b2:	3328      	adds	r3, #40	@ 0x28
 80038b4:	2100      	movs	r1, #0
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fbca 	bl	8004050 <RCCEx_PLL3_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80038c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80038ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80038d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038da:	2100      	movs	r1, #0
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038e8:	460b      	mov	r3, r1
 80038ea:	4313      	orrs	r3, r2
 80038ec:	d011      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038f2:	3328      	adds	r3, #40	@ 0x28
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fbaa 	bl	8004050 <RCCEx_PLL3_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003902:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800390a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800390e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800391a:	2100      	movs	r1, #0
 800391c:	6039      	str	r1, [r7, #0]
 800391e:	f003 0320 	and.w	r3, r3, #32
 8003922:	607b      	str	r3, [r7, #4]
 8003924:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003928:	460b      	mov	r3, r1
 800392a:	4313      	orrs	r3, r2
 800392c:	d011      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800392e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003932:	3328      	adds	r3, #40	@ 0x28
 8003934:	2102      	movs	r1, #2
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb8a 	bl	8004050 <RCCEx_PLL3_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003942:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800394e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003952:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
}
 8003960:	4618      	mov	r0, r3
 8003962:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003966:	46bd      	mov	sp, r7
 8003968:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800396c:	58024400 	.word	0x58024400

08003970 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003974:	f7fe fd56 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 8003978:	4602      	mov	r2, r0
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	4904      	ldr	r1, [pc, #16]	@ (8003998 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003986:	5ccb      	ldrb	r3, [r1, r3]
 8003988:	f003 031f 	and.w	r3, r3, #31
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	58024400 	.word	0x58024400
 8003998:	080053dc 	.word	0x080053dc

0800399c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800399c:	b480      	push	{r7}
 800399e:	b089      	sub	sp, #36	@ 0x24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80039a4:	4ba1      	ldr	r3, [pc, #644]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	f003 0303 	and.w	r3, r3, #3
 80039ac:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80039ae:	4b9f      	ldr	r3, [pc, #636]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b2:	0b1b      	lsrs	r3, r3, #12
 80039b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039b8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80039ba:	4b9c      	ldr	r3, [pc, #624]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039be:	091b      	lsrs	r3, r3, #4
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80039c6:	4b99      	ldr	r3, [pc, #612]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ca:	08db      	lsrs	r3, r3, #3
 80039cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039d0:	693a      	ldr	r2, [r7, #16]
 80039d2:	fb02 f303 	mul.w	r3, r2, r3
 80039d6:	ee07 3a90 	vmov	s15, r3
 80039da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 8111 	beq.w	8003c0c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	f000 8083 	beq.w	8003af8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	f200 80a1 	bhi.w	8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d003      	beq.n	8003a08 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d056      	beq.n	8003ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003a06:	e099      	b.n	8003b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a08:	4b88      	ldr	r3, [pc, #544]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0320 	and.w	r3, r3, #32
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d02d      	beq.n	8003a70 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a14:	4b85      	ldr	r3, [pc, #532]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	08db      	lsrs	r3, r3, #3
 8003a1a:	f003 0303 	and.w	r3, r3, #3
 8003a1e:	4a84      	ldr	r2, [pc, #528]	@ (8003c30 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003a20:	fa22 f303 	lsr.w	r3, r2, r3
 8003a24:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	ee07 3a90 	vmov	s15, r3
 8003a2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	ee07 3a90 	vmov	s15, r3
 8003a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a46:	ee07 3a90 	vmov	s15, r3
 8003a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a52:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003a6e:	e087      	b.n	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	ee07 3a90 	vmov	s15, r3
 8003a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a7a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a82:	4b6a      	ldr	r3, [pc, #424]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a8a:	ee07 3a90 	vmov	s15, r3
 8003a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a96:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ab2:	e065      	b.n	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ac6:	4b59      	ldr	r3, [pc, #356]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ada:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003af6:	e043      	b.n	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b02:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003c40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b0a:	4b48      	ldr	r3, [pc, #288]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b12:	ee07 3a90 	vmov	s15, r3
 8003b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b1e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b3a:	e021      	b.n	8003b80 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	ee07 3a90 	vmov	s15, r3
 8003b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b46:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b4e:	4b37      	ldr	r3, [pc, #220]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b56:	ee07 3a90 	vmov	s15, r3
 8003b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b62:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003c34 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b7e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b80:	4b2a      	ldr	r3, [pc, #168]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b84:	0a5b      	lsrs	r3, r3, #9
 8003b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ba6:	ee17 2a90 	vmov	r2, s15
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003bae:	4b1f      	ldr	r3, [pc, #124]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	0c1b      	lsrs	r3, r3, #16
 8003bb4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb8:	ee07 3a90 	vmov	s15, r3
 8003bbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bc4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bc8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bd4:	ee17 2a90 	vmov	r2, s15
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003bdc:	4b13      	ldr	r3, [pc, #76]	@ (8003c2c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	0e1b      	lsrs	r3, r3, #24
 8003be2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003bf2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003bf6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003bfa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c02:	ee17 2a90 	vmov	r2, s15
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003c0a:	e008      	b.n	8003c1e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	609a      	str	r2, [r3, #8]
}
 8003c1e:	bf00      	nop
 8003c20:	3724      	adds	r7, #36	@ 0x24
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	58024400 	.word	0x58024400
 8003c30:	03d09000 	.word	0x03d09000
 8003c34:	46000000 	.word	0x46000000
 8003c38:	4c742400 	.word	0x4c742400
 8003c3c:	4a742400 	.word	0x4a742400
 8003c40:	4bbebc20 	.word	0x4bbebc20

08003c44 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b089      	sub	sp, #36	@ 0x24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c4c:	4ba1      	ldr	r3, [pc, #644]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	f003 0303 	and.w	r3, r3, #3
 8003c54:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003c56:	4b9f      	ldr	r3, [pc, #636]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c5a:	0d1b      	lsrs	r3, r3, #20
 8003c5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c60:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003c62:	4b9c      	ldr	r3, [pc, #624]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c66:	0a1b      	lsrs	r3, r3, #8
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003c6e:	4b99      	ldr	r3, [pc, #612]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c72:	08db      	lsrs	r3, r3, #3
 8003c74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c78:	693a      	ldr	r2, [r7, #16]
 8003c7a:	fb02 f303 	mul.w	r3, r2, r3
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	f000 8111 	beq.w	8003eb4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	f000 8083 	beq.w	8003da0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c9a:	69bb      	ldr	r3, [r7, #24]
 8003c9c:	2b02      	cmp	r3, #2
 8003c9e:	f200 80a1 	bhi.w	8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d056      	beq.n	8003d5c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003cae:	e099      	b.n	8003de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cb0:	4b88      	ldr	r3, [pc, #544]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0320 	and.w	r3, r3, #32
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d02d      	beq.n	8003d18 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003cbc:	4b85      	ldr	r3, [pc, #532]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	08db      	lsrs	r3, r3, #3
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	4a84      	ldr	r2, [pc, #528]	@ (8003ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ccc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ce6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cee:	ee07 3a90 	vmov	s15, r3
 8003cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cfa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003d16:	e087      	b.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	ee07 3a90 	vmov	s15, r3
 8003d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d2a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d5a:	e065      	b.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	ee07 3a90 	vmov	s15, r3
 8003d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d6e:	4b59      	ldr	r3, [pc, #356]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d76:	ee07 3a90 	vmov	s15, r3
 8003d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d9e:	e043      	b.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	ee07 3a90 	vmov	s15, r3
 8003da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003daa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003ee8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003db2:	4b48      	ldr	r3, [pc, #288]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dba:	ee07 3a90 	vmov	s15, r3
 8003dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003dc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003de2:	e021      	b.n	8003e28 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	ee07 3a90 	vmov	s15, r3
 8003dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003df6:	4b37      	ldr	r3, [pc, #220]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	ee07 3a90 	vmov	s15, r3
 8003e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003edc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e26:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003e28:	4b2a      	ldr	r3, [pc, #168]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2c:	0a5b      	lsrs	r3, r3, #9
 8003e2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e42:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e4e:	ee17 2a90 	vmov	r2, s15
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003e56:	4b1f      	ldr	r3, [pc, #124]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5a:	0c1b      	lsrs	r3, r3, #16
 8003e5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e60:	ee07 3a90 	vmov	s15, r3
 8003e64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e70:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7c:	ee17 2a90 	vmov	r2, s15
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e84:	4b13      	ldr	r3, [pc, #76]	@ (8003ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e88:	0e1b      	lsrs	r3, r3, #24
 8003e8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e8e:	ee07 3a90 	vmov	s15, r3
 8003e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ea2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ea6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003eaa:	ee17 2a90 	vmov	r2, s15
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	609a      	str	r2, [r3, #8]
}
 8003ec6:	bf00      	nop
 8003ec8:	3724      	adds	r7, #36	@ 0x24
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	58024400 	.word	0x58024400
 8003ed8:	03d09000 	.word	0x03d09000
 8003edc:	46000000 	.word	0x46000000
 8003ee0:	4c742400 	.word	0x4c742400
 8003ee4:	4a742400 	.word	0x4a742400
 8003ee8:	4bbebc20 	.word	0x4bbebc20

08003eec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003efa:	4b53      	ldr	r3, [pc, #332]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003efe:	f003 0303 	and.w	r3, r3, #3
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	d101      	bne.n	8003f0a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e099      	b.n	800403e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f0a:	4b4f      	ldr	r3, [pc, #316]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f10:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f16:	f7fc ff5d 	bl	8000dd4 <HAL_GetTick>
 8003f1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f1c:	e008      	b.n	8003f30 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f1e:	f7fc ff59 	bl	8000dd4 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e086      	b.n	800403e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f30:	4b45      	ldr	r3, [pc, #276]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1f0      	bne.n	8003f1e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f3c:	4b42      	ldr	r3, [pc, #264]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	031b      	lsls	r3, r3, #12
 8003f4a:	493f      	ldr	r1, [pc, #252]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	3b01      	subs	r3, #1
 8003f56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	025b      	lsls	r3, r3, #9
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	68db      	ldr	r3, [r3, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f72:	431a      	orrs	r2, r3
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	061b      	lsls	r3, r3, #24
 8003f7c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f80:	4931      	ldr	r1, [pc, #196]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f86:	4b30      	ldr	r3, [pc, #192]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	492d      	ldr	r1, [pc, #180]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f98:	4b2b      	ldr	r3, [pc, #172]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	f023 0220 	bic.w	r2, r3, #32
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	4928      	ldr	r1, [pc, #160]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003faa:	4b27      	ldr	r3, [pc, #156]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fae:	4a26      	ldr	r2, [pc, #152]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fb0:	f023 0310 	bic.w	r3, r3, #16
 8003fb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fb6:	4b24      	ldr	r3, [pc, #144]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fba:	4b24      	ldr	r3, [pc, #144]	@ (800404c <RCCEx_PLL2_Config+0x160>)
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	69d2      	ldr	r2, [r2, #28]
 8003fc2:	00d2      	lsls	r2, r2, #3
 8003fc4:	4920      	ldr	r1, [pc, #128]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fca:	4b1f      	ldr	r3, [pc, #124]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	f043 0310 	orr.w	r3, r3, #16
 8003fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4a19      	ldr	r2, [pc, #100]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003fe2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003fe6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003fe8:	e00f      	b.n	800400a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d106      	bne.n	8003ffe <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ff0:	4b15      	ldr	r3, [pc, #84]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff4:	4a14      	ldr	r2, [pc, #80]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8003ff6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ffc:	e005      	b.n	800400a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ffe:	4b12      	ldr	r3, [pc, #72]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004002:	4a11      	ldr	r2, [pc, #68]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004004:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004008:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800400a:	4b0f      	ldr	r3, [pc, #60]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a0e      	ldr	r2, [pc, #56]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004010:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004016:	f7fc fedd 	bl	8000dd4 <HAL_GetTick>
 800401a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800401c:	e008      	b.n	8004030 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800401e:	f7fc fed9 	bl	8000dd4 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d901      	bls.n	8004030 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e006      	b.n	800403e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004030:	4b05      	ldr	r3, [pc, #20]	@ (8004048 <RCCEx_PLL2_Config+0x15c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0f0      	beq.n	800401e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800403c:	7bfb      	ldrb	r3, [r7, #15]
}
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	58024400 	.word	0x58024400
 800404c:	ffff0007 	.word	0xffff0007

08004050 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800405e:	4b53      	ldr	r3, [pc, #332]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b03      	cmp	r3, #3
 8004068:	d101      	bne.n	800406e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e099      	b.n	80041a2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800406e:	4b4f      	ldr	r3, [pc, #316]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a4e      	ldr	r2, [pc, #312]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004074:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004078:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800407a:	f7fc feab 	bl	8000dd4 <HAL_GetTick>
 800407e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004080:	e008      	b.n	8004094 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004082:	f7fc fea7 	bl	8000dd4 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e086      	b.n	80041a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004094:	4b45      	ldr	r3, [pc, #276]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1f0      	bne.n	8004082 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040a0:	4b42      	ldr	r3, [pc, #264]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	051b      	lsls	r3, r3, #20
 80040ae:	493f      	ldr	r1, [pc, #252]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	628b      	str	r3, [r1, #40]	@ 0x28
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	3b01      	subs	r3, #1
 80040ba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	025b      	lsls	r3, r3, #9
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	431a      	orrs	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	041b      	lsls	r3, r3, #16
 80040d2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040d6:	431a      	orrs	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	3b01      	subs	r3, #1
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040e4:	4931      	ldr	r1, [pc, #196]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80040ea:	4b30      	ldr	r3, [pc, #192]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	492d      	ldr	r1, [pc, #180]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80040fc:	4b2b      	ldr	r3, [pc, #172]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	4928      	ldr	r1, [pc, #160]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800410e:	4b27      	ldr	r3, [pc, #156]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004112:	4a26      	ldr	r2, [pc, #152]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004118:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800411a:	4b24      	ldr	r3, [pc, #144]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800411c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800411e:	4b24      	ldr	r3, [pc, #144]	@ (80041b0 <RCCEx_PLL3_Config+0x160>)
 8004120:	4013      	ands	r3, r2
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	69d2      	ldr	r2, [r2, #28]
 8004126:	00d2      	lsls	r2, r2, #3
 8004128:	4920      	ldr	r1, [pc, #128]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800412a:	4313      	orrs	r3, r2
 800412c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800412e:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004132:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004134:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004138:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004140:	4b1a      	ldr	r3, [pc, #104]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4a19      	ldr	r2, [pc, #100]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004146:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800414c:	e00f      	b.n	800416e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d106      	bne.n	8004162 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004154:	4b15      	ldr	r3, [pc, #84]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004158:	4a14      	ldr	r2, [pc, #80]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 800415a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800415e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004160:	e005      	b.n	800416e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004162:	4b12      	ldr	r3, [pc, #72]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004166:	4a11      	ldr	r2, [pc, #68]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004168:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800416c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800416e:	4b0f      	ldr	r3, [pc, #60]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a0e      	ldr	r2, [pc, #56]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004174:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004178:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800417a:	f7fc fe2b 	bl	8000dd4 <HAL_GetTick>
 800417e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004180:	e008      	b.n	8004194 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004182:	f7fc fe27 	bl	8000dd4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e006      	b.n	80041a2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004194:	4b05      	ldr	r3, [pc, #20]	@ (80041ac <RCCEx_PLL3_Config+0x15c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
 80041b0:	ffff0007 	.word	0xffff0007

080041b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e042      	b.n	800424c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d106      	bne.n	80041de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7fc fcaf 	bl	8000b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2224      	movs	r2, #36	@ 0x24
 80041e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f022 0201 	bic.w	r2, r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 fd90 	bl	8004d24 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f000 f825 	bl	8004254 <UART_SetConfig>
 800420a:	4603      	mov	r3, r0
 800420c:	2b01      	cmp	r3, #1
 800420e:	d101      	bne.n	8004214 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e01b      	b.n	800424c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f042 0201 	orr.w	r2, r2, #1
 8004242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 fe0f 	bl	8004e68 <UART_CheckIdleState>
 800424a:	4603      	mov	r3, r0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b092      	sub	sp, #72	@ 0x48
 800425a:	af00      	add	r7, sp, #0
 800425c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800425e:	2300      	movs	r3, #0
 8004260:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	431a      	orrs	r2, r3
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	431a      	orrs	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	69db      	ldr	r3, [r3, #28]
 8004278:	4313      	orrs	r3, r2
 800427a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	4bbe      	ldr	r3, [pc, #760]	@ (800457c <UART_SetConfig+0x328>)
 8004284:	4013      	ands	r3, r2
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	6812      	ldr	r2, [r2, #0]
 800428a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800428c:	430b      	orrs	r3, r1
 800428e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	68da      	ldr	r2, [r3, #12]
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4ab3      	ldr	r2, [pc, #716]	@ (8004580 <UART_SetConfig+0x32c>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d004      	beq.n	80042c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042bc:	4313      	orrs	r3, r2
 80042be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	689a      	ldr	r2, [r3, #8]
 80042c6:	4baf      	ldr	r3, [pc, #700]	@ (8004584 <UART_SetConfig+0x330>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	6812      	ldr	r2, [r2, #0]
 80042ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	f023 010f 	bic.w	r1, r3, #15
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	430a      	orrs	r2, r1
 80042e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4aa6      	ldr	r2, [pc, #664]	@ (8004588 <UART_SetConfig+0x334>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d177      	bne.n	80043e4 <UART_SetConfig+0x190>
 80042f4:	4ba5      	ldr	r3, [pc, #660]	@ (800458c <UART_SetConfig+0x338>)
 80042f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042fc:	2b28      	cmp	r3, #40	@ 0x28
 80042fe:	d86d      	bhi.n	80043dc <UART_SetConfig+0x188>
 8004300:	a201      	add	r2, pc, #4	@ (adr r2, 8004308 <UART_SetConfig+0xb4>)
 8004302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004306:	bf00      	nop
 8004308:	080043ad 	.word	0x080043ad
 800430c:	080043dd 	.word	0x080043dd
 8004310:	080043dd 	.word	0x080043dd
 8004314:	080043dd 	.word	0x080043dd
 8004318:	080043dd 	.word	0x080043dd
 800431c:	080043dd 	.word	0x080043dd
 8004320:	080043dd 	.word	0x080043dd
 8004324:	080043dd 	.word	0x080043dd
 8004328:	080043b5 	.word	0x080043b5
 800432c:	080043dd 	.word	0x080043dd
 8004330:	080043dd 	.word	0x080043dd
 8004334:	080043dd 	.word	0x080043dd
 8004338:	080043dd 	.word	0x080043dd
 800433c:	080043dd 	.word	0x080043dd
 8004340:	080043dd 	.word	0x080043dd
 8004344:	080043dd 	.word	0x080043dd
 8004348:	080043bd 	.word	0x080043bd
 800434c:	080043dd 	.word	0x080043dd
 8004350:	080043dd 	.word	0x080043dd
 8004354:	080043dd 	.word	0x080043dd
 8004358:	080043dd 	.word	0x080043dd
 800435c:	080043dd 	.word	0x080043dd
 8004360:	080043dd 	.word	0x080043dd
 8004364:	080043dd 	.word	0x080043dd
 8004368:	080043c5 	.word	0x080043c5
 800436c:	080043dd 	.word	0x080043dd
 8004370:	080043dd 	.word	0x080043dd
 8004374:	080043dd 	.word	0x080043dd
 8004378:	080043dd 	.word	0x080043dd
 800437c:	080043dd 	.word	0x080043dd
 8004380:	080043dd 	.word	0x080043dd
 8004384:	080043dd 	.word	0x080043dd
 8004388:	080043cd 	.word	0x080043cd
 800438c:	080043dd 	.word	0x080043dd
 8004390:	080043dd 	.word	0x080043dd
 8004394:	080043dd 	.word	0x080043dd
 8004398:	080043dd 	.word	0x080043dd
 800439c:	080043dd 	.word	0x080043dd
 80043a0:	080043dd 	.word	0x080043dd
 80043a4:	080043dd 	.word	0x080043dd
 80043a8:	080043d5 	.word	0x080043d5
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b2:	e222      	b.n	80047fa <UART_SetConfig+0x5a6>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ba:	e21e      	b.n	80047fa <UART_SetConfig+0x5a6>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c2:	e21a      	b.n	80047fa <UART_SetConfig+0x5a6>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ca:	e216      	b.n	80047fa <UART_SetConfig+0x5a6>
 80043cc:	2320      	movs	r3, #32
 80043ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043d2:	e212      	b.n	80047fa <UART_SetConfig+0x5a6>
 80043d4:	2340      	movs	r3, #64	@ 0x40
 80043d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043da:	e20e      	b.n	80047fa <UART_SetConfig+0x5a6>
 80043dc:	2380      	movs	r3, #128	@ 0x80
 80043de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043e2:	e20a      	b.n	80047fa <UART_SetConfig+0x5a6>
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a69      	ldr	r2, [pc, #420]	@ (8004590 <UART_SetConfig+0x33c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d130      	bne.n	8004450 <UART_SetConfig+0x1fc>
 80043ee:	4b67      	ldr	r3, [pc, #412]	@ (800458c <UART_SetConfig+0x338>)
 80043f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043f2:	f003 0307 	and.w	r3, r3, #7
 80043f6:	2b05      	cmp	r3, #5
 80043f8:	d826      	bhi.n	8004448 <UART_SetConfig+0x1f4>
 80043fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004400 <UART_SetConfig+0x1ac>)
 80043fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004400:	08004419 	.word	0x08004419
 8004404:	08004421 	.word	0x08004421
 8004408:	08004429 	.word	0x08004429
 800440c:	08004431 	.word	0x08004431
 8004410:	08004439 	.word	0x08004439
 8004414:	08004441 	.word	0x08004441
 8004418:	2300      	movs	r3, #0
 800441a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441e:	e1ec      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004420:	2304      	movs	r3, #4
 8004422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004426:	e1e8      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004428:	2308      	movs	r3, #8
 800442a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442e:	e1e4      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004430:	2310      	movs	r3, #16
 8004432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004436:	e1e0      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004438:	2320      	movs	r3, #32
 800443a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443e:	e1dc      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004440:	2340      	movs	r3, #64	@ 0x40
 8004442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004446:	e1d8      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004448:	2380      	movs	r3, #128	@ 0x80
 800444a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800444e:	e1d4      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a4f      	ldr	r2, [pc, #316]	@ (8004594 <UART_SetConfig+0x340>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d130      	bne.n	80044bc <UART_SetConfig+0x268>
 800445a:	4b4c      	ldr	r3, [pc, #304]	@ (800458c <UART_SetConfig+0x338>)
 800445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	2b05      	cmp	r3, #5
 8004464:	d826      	bhi.n	80044b4 <UART_SetConfig+0x260>
 8004466:	a201      	add	r2, pc, #4	@ (adr r2, 800446c <UART_SetConfig+0x218>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004485 	.word	0x08004485
 8004470:	0800448d 	.word	0x0800448d
 8004474:	08004495 	.word	0x08004495
 8004478:	0800449d 	.word	0x0800449d
 800447c:	080044a5 	.word	0x080044a5
 8004480:	080044ad 	.word	0x080044ad
 8004484:	2300      	movs	r3, #0
 8004486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448a:	e1b6      	b.n	80047fa <UART_SetConfig+0x5a6>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004492:	e1b2      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449a:	e1ae      	b.n	80047fa <UART_SetConfig+0x5a6>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a2:	e1aa      	b.n	80047fa <UART_SetConfig+0x5a6>
 80044a4:	2320      	movs	r3, #32
 80044a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044aa:	e1a6      	b.n	80047fa <UART_SetConfig+0x5a6>
 80044ac:	2340      	movs	r3, #64	@ 0x40
 80044ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044b2:	e1a2      	b.n	80047fa <UART_SetConfig+0x5a6>
 80044b4:	2380      	movs	r3, #128	@ 0x80
 80044b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ba:	e19e      	b.n	80047fa <UART_SetConfig+0x5a6>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a35      	ldr	r2, [pc, #212]	@ (8004598 <UART_SetConfig+0x344>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d130      	bne.n	8004528 <UART_SetConfig+0x2d4>
 80044c6:	4b31      	ldr	r3, [pc, #196]	@ (800458c <UART_SetConfig+0x338>)
 80044c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ca:	f003 0307 	and.w	r3, r3, #7
 80044ce:	2b05      	cmp	r3, #5
 80044d0:	d826      	bhi.n	8004520 <UART_SetConfig+0x2cc>
 80044d2:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <UART_SetConfig+0x284>)
 80044d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d8:	080044f1 	.word	0x080044f1
 80044dc:	080044f9 	.word	0x080044f9
 80044e0:	08004501 	.word	0x08004501
 80044e4:	08004509 	.word	0x08004509
 80044e8:	08004511 	.word	0x08004511
 80044ec:	08004519 	.word	0x08004519
 80044f0:	2300      	movs	r3, #0
 80044f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f6:	e180      	b.n	80047fa <UART_SetConfig+0x5a6>
 80044f8:	2304      	movs	r3, #4
 80044fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044fe:	e17c      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004500:	2308      	movs	r3, #8
 8004502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004506:	e178      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004508:	2310      	movs	r3, #16
 800450a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800450e:	e174      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004510:	2320      	movs	r3, #32
 8004512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004516:	e170      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004518:	2340      	movs	r3, #64	@ 0x40
 800451a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800451e:	e16c      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004520:	2380      	movs	r3, #128	@ 0x80
 8004522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004526:	e168      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1b      	ldr	r2, [pc, #108]	@ (800459c <UART_SetConfig+0x348>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d142      	bne.n	80045b8 <UART_SetConfig+0x364>
 8004532:	4b16      	ldr	r3, [pc, #88]	@ (800458c <UART_SetConfig+0x338>)
 8004534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	2b05      	cmp	r3, #5
 800453c:	d838      	bhi.n	80045b0 <UART_SetConfig+0x35c>
 800453e:	a201      	add	r2, pc, #4	@ (adr r2, 8004544 <UART_SetConfig+0x2f0>)
 8004540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004544:	0800455d 	.word	0x0800455d
 8004548:	08004565 	.word	0x08004565
 800454c:	0800456d 	.word	0x0800456d
 8004550:	08004575 	.word	0x08004575
 8004554:	080045a1 	.word	0x080045a1
 8004558:	080045a9 	.word	0x080045a9
 800455c:	2300      	movs	r3, #0
 800455e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004562:	e14a      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004564:	2304      	movs	r3, #4
 8004566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800456a:	e146      	b.n	80047fa <UART_SetConfig+0x5a6>
 800456c:	2308      	movs	r3, #8
 800456e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004572:	e142      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004574:	2310      	movs	r3, #16
 8004576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800457a:	e13e      	b.n	80047fa <UART_SetConfig+0x5a6>
 800457c:	cfff69f3 	.word	0xcfff69f3
 8004580:	58000c00 	.word	0x58000c00
 8004584:	11fff4ff 	.word	0x11fff4ff
 8004588:	40011000 	.word	0x40011000
 800458c:	58024400 	.word	0x58024400
 8004590:	40004400 	.word	0x40004400
 8004594:	40004800 	.word	0x40004800
 8004598:	40004c00 	.word	0x40004c00
 800459c:	40005000 	.word	0x40005000
 80045a0:	2320      	movs	r3, #32
 80045a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045a6:	e128      	b.n	80047fa <UART_SetConfig+0x5a6>
 80045a8:	2340      	movs	r3, #64	@ 0x40
 80045aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ae:	e124      	b.n	80047fa <UART_SetConfig+0x5a6>
 80045b0:	2380      	movs	r3, #128	@ 0x80
 80045b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b6:	e120      	b.n	80047fa <UART_SetConfig+0x5a6>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4acb      	ldr	r2, [pc, #812]	@ (80048ec <UART_SetConfig+0x698>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d176      	bne.n	80046b0 <UART_SetConfig+0x45c>
 80045c2:	4bcb      	ldr	r3, [pc, #812]	@ (80048f0 <UART_SetConfig+0x69c>)
 80045c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045ca:	2b28      	cmp	r3, #40	@ 0x28
 80045cc:	d86c      	bhi.n	80046a8 <UART_SetConfig+0x454>
 80045ce:	a201      	add	r2, pc, #4	@ (adr r2, 80045d4 <UART_SetConfig+0x380>)
 80045d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d4:	08004679 	.word	0x08004679
 80045d8:	080046a9 	.word	0x080046a9
 80045dc:	080046a9 	.word	0x080046a9
 80045e0:	080046a9 	.word	0x080046a9
 80045e4:	080046a9 	.word	0x080046a9
 80045e8:	080046a9 	.word	0x080046a9
 80045ec:	080046a9 	.word	0x080046a9
 80045f0:	080046a9 	.word	0x080046a9
 80045f4:	08004681 	.word	0x08004681
 80045f8:	080046a9 	.word	0x080046a9
 80045fc:	080046a9 	.word	0x080046a9
 8004600:	080046a9 	.word	0x080046a9
 8004604:	080046a9 	.word	0x080046a9
 8004608:	080046a9 	.word	0x080046a9
 800460c:	080046a9 	.word	0x080046a9
 8004610:	080046a9 	.word	0x080046a9
 8004614:	08004689 	.word	0x08004689
 8004618:	080046a9 	.word	0x080046a9
 800461c:	080046a9 	.word	0x080046a9
 8004620:	080046a9 	.word	0x080046a9
 8004624:	080046a9 	.word	0x080046a9
 8004628:	080046a9 	.word	0x080046a9
 800462c:	080046a9 	.word	0x080046a9
 8004630:	080046a9 	.word	0x080046a9
 8004634:	08004691 	.word	0x08004691
 8004638:	080046a9 	.word	0x080046a9
 800463c:	080046a9 	.word	0x080046a9
 8004640:	080046a9 	.word	0x080046a9
 8004644:	080046a9 	.word	0x080046a9
 8004648:	080046a9 	.word	0x080046a9
 800464c:	080046a9 	.word	0x080046a9
 8004650:	080046a9 	.word	0x080046a9
 8004654:	08004699 	.word	0x08004699
 8004658:	080046a9 	.word	0x080046a9
 800465c:	080046a9 	.word	0x080046a9
 8004660:	080046a9 	.word	0x080046a9
 8004664:	080046a9 	.word	0x080046a9
 8004668:	080046a9 	.word	0x080046a9
 800466c:	080046a9 	.word	0x080046a9
 8004670:	080046a9 	.word	0x080046a9
 8004674:	080046a1 	.word	0x080046a1
 8004678:	2301      	movs	r3, #1
 800467a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467e:	e0bc      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004680:	2304      	movs	r3, #4
 8004682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004686:	e0b8      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004688:	2308      	movs	r3, #8
 800468a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468e:	e0b4      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004690:	2310      	movs	r3, #16
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004696:	e0b0      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004698:	2320      	movs	r3, #32
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469e:	e0ac      	b.n	80047fa <UART_SetConfig+0x5a6>
 80046a0:	2340      	movs	r3, #64	@ 0x40
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a6:	e0a8      	b.n	80047fa <UART_SetConfig+0x5a6>
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ae:	e0a4      	b.n	80047fa <UART_SetConfig+0x5a6>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a8f      	ldr	r2, [pc, #572]	@ (80048f4 <UART_SetConfig+0x6a0>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d130      	bne.n	800471c <UART_SetConfig+0x4c8>
 80046ba:	4b8d      	ldr	r3, [pc, #564]	@ (80048f0 <UART_SetConfig+0x69c>)
 80046bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046be:	f003 0307 	and.w	r3, r3, #7
 80046c2:	2b05      	cmp	r3, #5
 80046c4:	d826      	bhi.n	8004714 <UART_SetConfig+0x4c0>
 80046c6:	a201      	add	r2, pc, #4	@ (adr r2, 80046cc <UART_SetConfig+0x478>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	080046e5 	.word	0x080046e5
 80046d0:	080046ed 	.word	0x080046ed
 80046d4:	080046f5 	.word	0x080046f5
 80046d8:	080046fd 	.word	0x080046fd
 80046dc:	08004705 	.word	0x08004705
 80046e0:	0800470d 	.word	0x0800470d
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ea:	e086      	b.n	80047fa <UART_SetConfig+0x5a6>
 80046ec:	2304      	movs	r3, #4
 80046ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f2:	e082      	b.n	80047fa <UART_SetConfig+0x5a6>
 80046f4:	2308      	movs	r3, #8
 80046f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fa:	e07e      	b.n	80047fa <UART_SetConfig+0x5a6>
 80046fc:	2310      	movs	r3, #16
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004702:	e07a      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004704:	2320      	movs	r3, #32
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470a:	e076      	b.n	80047fa <UART_SetConfig+0x5a6>
 800470c:	2340      	movs	r3, #64	@ 0x40
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004712:	e072      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004714:	2380      	movs	r3, #128	@ 0x80
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471a:	e06e      	b.n	80047fa <UART_SetConfig+0x5a6>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a75      	ldr	r2, [pc, #468]	@ (80048f8 <UART_SetConfig+0x6a4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d130      	bne.n	8004788 <UART_SetConfig+0x534>
 8004726:	4b72      	ldr	r3, [pc, #456]	@ (80048f0 <UART_SetConfig+0x69c>)
 8004728:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	2b05      	cmp	r3, #5
 8004730:	d826      	bhi.n	8004780 <UART_SetConfig+0x52c>
 8004732:	a201      	add	r2, pc, #4	@ (adr r2, 8004738 <UART_SetConfig+0x4e4>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	08004751 	.word	0x08004751
 800473c:	08004759 	.word	0x08004759
 8004740:	08004761 	.word	0x08004761
 8004744:	08004769 	.word	0x08004769
 8004748:	08004771 	.word	0x08004771
 800474c:	08004779 	.word	0x08004779
 8004750:	2300      	movs	r3, #0
 8004752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004756:	e050      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004758:	2304      	movs	r3, #4
 800475a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475e:	e04c      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004760:	2308      	movs	r3, #8
 8004762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004766:	e048      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004768:	2310      	movs	r3, #16
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476e:	e044      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004770:	2320      	movs	r3, #32
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004776:	e040      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004778:	2340      	movs	r3, #64	@ 0x40
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477e:	e03c      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004780:	2380      	movs	r3, #128	@ 0x80
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004786:	e038      	b.n	80047fa <UART_SetConfig+0x5a6>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a5b      	ldr	r2, [pc, #364]	@ (80048fc <UART_SetConfig+0x6a8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d130      	bne.n	80047f4 <UART_SetConfig+0x5a0>
 8004792:	4b57      	ldr	r3, [pc, #348]	@ (80048f0 <UART_SetConfig+0x69c>)
 8004794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004796:	f003 0307 	and.w	r3, r3, #7
 800479a:	2b05      	cmp	r3, #5
 800479c:	d826      	bhi.n	80047ec <UART_SetConfig+0x598>
 800479e:	a201      	add	r2, pc, #4	@ (adr r2, 80047a4 <UART_SetConfig+0x550>)
 80047a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a4:	080047bd 	.word	0x080047bd
 80047a8:	080047c5 	.word	0x080047c5
 80047ac:	080047cd 	.word	0x080047cd
 80047b0:	080047d5 	.word	0x080047d5
 80047b4:	080047dd 	.word	0x080047dd
 80047b8:	080047e5 	.word	0x080047e5
 80047bc:	2302      	movs	r3, #2
 80047be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c2:	e01a      	b.n	80047fa <UART_SetConfig+0x5a6>
 80047c4:	2304      	movs	r3, #4
 80047c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ca:	e016      	b.n	80047fa <UART_SetConfig+0x5a6>
 80047cc:	2308      	movs	r3, #8
 80047ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d2:	e012      	b.n	80047fa <UART_SetConfig+0x5a6>
 80047d4:	2310      	movs	r3, #16
 80047d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047da:	e00e      	b.n	80047fa <UART_SetConfig+0x5a6>
 80047dc:	2320      	movs	r3, #32
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047e2:	e00a      	b.n	80047fa <UART_SetConfig+0x5a6>
 80047e4:	2340      	movs	r3, #64	@ 0x40
 80047e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ea:	e006      	b.n	80047fa <UART_SetConfig+0x5a6>
 80047ec:	2380      	movs	r3, #128	@ 0x80
 80047ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047f2:	e002      	b.n	80047fa <UART_SetConfig+0x5a6>
 80047f4:	2380      	movs	r3, #128	@ 0x80
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a3f      	ldr	r2, [pc, #252]	@ (80048fc <UART_SetConfig+0x6a8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	f040 80f8 	bne.w	80049f6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004806:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800480a:	2b20      	cmp	r3, #32
 800480c:	dc46      	bgt.n	800489c <UART_SetConfig+0x648>
 800480e:	2b02      	cmp	r3, #2
 8004810:	f2c0 8082 	blt.w	8004918 <UART_SetConfig+0x6c4>
 8004814:	3b02      	subs	r3, #2
 8004816:	2b1e      	cmp	r3, #30
 8004818:	d87e      	bhi.n	8004918 <UART_SetConfig+0x6c4>
 800481a:	a201      	add	r2, pc, #4	@ (adr r2, 8004820 <UART_SetConfig+0x5cc>)
 800481c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004820:	080048a3 	.word	0x080048a3
 8004824:	08004919 	.word	0x08004919
 8004828:	080048ab 	.word	0x080048ab
 800482c:	08004919 	.word	0x08004919
 8004830:	08004919 	.word	0x08004919
 8004834:	08004919 	.word	0x08004919
 8004838:	080048bb 	.word	0x080048bb
 800483c:	08004919 	.word	0x08004919
 8004840:	08004919 	.word	0x08004919
 8004844:	08004919 	.word	0x08004919
 8004848:	08004919 	.word	0x08004919
 800484c:	08004919 	.word	0x08004919
 8004850:	08004919 	.word	0x08004919
 8004854:	08004919 	.word	0x08004919
 8004858:	080048cb 	.word	0x080048cb
 800485c:	08004919 	.word	0x08004919
 8004860:	08004919 	.word	0x08004919
 8004864:	08004919 	.word	0x08004919
 8004868:	08004919 	.word	0x08004919
 800486c:	08004919 	.word	0x08004919
 8004870:	08004919 	.word	0x08004919
 8004874:	08004919 	.word	0x08004919
 8004878:	08004919 	.word	0x08004919
 800487c:	08004919 	.word	0x08004919
 8004880:	08004919 	.word	0x08004919
 8004884:	08004919 	.word	0x08004919
 8004888:	08004919 	.word	0x08004919
 800488c:	08004919 	.word	0x08004919
 8004890:	08004919 	.word	0x08004919
 8004894:	08004919 	.word	0x08004919
 8004898:	0800490b 	.word	0x0800490b
 800489c:	2b40      	cmp	r3, #64	@ 0x40
 800489e:	d037      	beq.n	8004910 <UART_SetConfig+0x6bc>
 80048a0:	e03a      	b.n	8004918 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80048a2:	f7ff f865 	bl	8003970 <HAL_RCCEx_GetD3PCLK1Freq>
 80048a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80048a8:	e03c      	b.n	8004924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff f874 	bl	800399c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048b8:	e034      	b.n	8004924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ba:	f107 0318 	add.w	r3, r7, #24
 80048be:	4618      	mov	r0, r3
 80048c0:	f7ff f9c0 	bl	8003c44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048c4:	69fb      	ldr	r3, [r7, #28]
 80048c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048c8:	e02c      	b.n	8004924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048ca:	4b09      	ldr	r3, [pc, #36]	@ (80048f0 <UART_SetConfig+0x69c>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0320 	and.w	r3, r3, #32
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80048d6:	4b06      	ldr	r3, [pc, #24]	@ (80048f0 <UART_SetConfig+0x69c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	08db      	lsrs	r3, r3, #3
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	4a07      	ldr	r2, [pc, #28]	@ (8004900 <UART_SetConfig+0x6ac>)
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80048e8:	e01c      	b.n	8004924 <UART_SetConfig+0x6d0>
 80048ea:	bf00      	nop
 80048ec:	40011400 	.word	0x40011400
 80048f0:	58024400 	.word	0x58024400
 80048f4:	40007800 	.word	0x40007800
 80048f8:	40007c00 	.word	0x40007c00
 80048fc:	58000c00 	.word	0x58000c00
 8004900:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004904:	4b9d      	ldr	r3, [pc, #628]	@ (8004b7c <UART_SetConfig+0x928>)
 8004906:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004908:	e00c      	b.n	8004924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800490a:	4b9d      	ldr	r3, [pc, #628]	@ (8004b80 <UART_SetConfig+0x92c>)
 800490c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800490e:	e009      	b.n	8004924 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004914:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004916:	e005      	b.n	8004924 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004918:	2300      	movs	r3, #0
 800491a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004922:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 81de 	beq.w	8004ce8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004930:	4a94      	ldr	r2, [pc, #592]	@ (8004b84 <UART_SetConfig+0x930>)
 8004932:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004936:	461a      	mov	r2, r3
 8004938:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800493a:	fbb3 f3f2 	udiv	r3, r3, r2
 800493e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800494c:	429a      	cmp	r2, r3
 800494e:	d305      	bcc.n	800495c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004958:	429a      	cmp	r2, r3
 800495a:	d903      	bls.n	8004964 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004962:	e1c1      	b.n	8004ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004966:	2200      	movs	r2, #0
 8004968:	60bb      	str	r3, [r7, #8]
 800496a:	60fa      	str	r2, [r7, #12]
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004970:	4a84      	ldr	r2, [pc, #528]	@ (8004b84 <UART_SetConfig+0x930>)
 8004972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004976:	b29b      	uxth	r3, r3
 8004978:	2200      	movs	r2, #0
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004982:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004986:	f7fb fca7 	bl	80002d8 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4610      	mov	r0, r2
 8004990:	4619      	mov	r1, r3
 8004992:	f04f 0200 	mov.w	r2, #0
 8004996:	f04f 0300 	mov.w	r3, #0
 800499a:	020b      	lsls	r3, r1, #8
 800499c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049a0:	0202      	lsls	r2, r0, #8
 80049a2:	6979      	ldr	r1, [r7, #20]
 80049a4:	6849      	ldr	r1, [r1, #4]
 80049a6:	0849      	lsrs	r1, r1, #1
 80049a8:	2000      	movs	r0, #0
 80049aa:	460c      	mov	r4, r1
 80049ac:	4605      	mov	r5, r0
 80049ae:	eb12 0804 	adds.w	r8, r2, r4
 80049b2:	eb43 0905 	adc.w	r9, r3, r5
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	469a      	mov	sl, r3
 80049be:	4693      	mov	fp, r2
 80049c0:	4652      	mov	r2, sl
 80049c2:	465b      	mov	r3, fp
 80049c4:	4640      	mov	r0, r8
 80049c6:	4649      	mov	r1, r9
 80049c8:	f7fb fc86 	bl	80002d8 <__aeabi_uldivmod>
 80049cc:	4602      	mov	r2, r0
 80049ce:	460b      	mov	r3, r1
 80049d0:	4613      	mov	r3, r2
 80049d2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049da:	d308      	bcc.n	80049ee <UART_SetConfig+0x79a>
 80049dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049e2:	d204      	bcs.n	80049ee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80049ea:	60da      	str	r2, [r3, #12]
 80049ec:	e17c      	b.n	8004ce8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80049f4:	e178      	b.n	8004ce8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049fe:	f040 80c5 	bne.w	8004b8c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004a02:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a06:	2b20      	cmp	r3, #32
 8004a08:	dc48      	bgt.n	8004a9c <UART_SetConfig+0x848>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	db7b      	blt.n	8004b06 <UART_SetConfig+0x8b2>
 8004a0e:	2b20      	cmp	r3, #32
 8004a10:	d879      	bhi.n	8004b06 <UART_SetConfig+0x8b2>
 8004a12:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <UART_SetConfig+0x7c4>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004aa3 	.word	0x08004aa3
 8004a1c:	08004aab 	.word	0x08004aab
 8004a20:	08004b07 	.word	0x08004b07
 8004a24:	08004b07 	.word	0x08004b07
 8004a28:	08004ab3 	.word	0x08004ab3
 8004a2c:	08004b07 	.word	0x08004b07
 8004a30:	08004b07 	.word	0x08004b07
 8004a34:	08004b07 	.word	0x08004b07
 8004a38:	08004ac3 	.word	0x08004ac3
 8004a3c:	08004b07 	.word	0x08004b07
 8004a40:	08004b07 	.word	0x08004b07
 8004a44:	08004b07 	.word	0x08004b07
 8004a48:	08004b07 	.word	0x08004b07
 8004a4c:	08004b07 	.word	0x08004b07
 8004a50:	08004b07 	.word	0x08004b07
 8004a54:	08004b07 	.word	0x08004b07
 8004a58:	08004ad3 	.word	0x08004ad3
 8004a5c:	08004b07 	.word	0x08004b07
 8004a60:	08004b07 	.word	0x08004b07
 8004a64:	08004b07 	.word	0x08004b07
 8004a68:	08004b07 	.word	0x08004b07
 8004a6c:	08004b07 	.word	0x08004b07
 8004a70:	08004b07 	.word	0x08004b07
 8004a74:	08004b07 	.word	0x08004b07
 8004a78:	08004b07 	.word	0x08004b07
 8004a7c:	08004b07 	.word	0x08004b07
 8004a80:	08004b07 	.word	0x08004b07
 8004a84:	08004b07 	.word	0x08004b07
 8004a88:	08004b07 	.word	0x08004b07
 8004a8c:	08004b07 	.word	0x08004b07
 8004a90:	08004b07 	.word	0x08004b07
 8004a94:	08004b07 	.word	0x08004b07
 8004a98:	08004af9 	.word	0x08004af9
 8004a9c:	2b40      	cmp	r3, #64	@ 0x40
 8004a9e:	d02e      	beq.n	8004afe <UART_SetConfig+0x8aa>
 8004aa0:	e031      	b.n	8004b06 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa2:	f7fd fcef 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8004aa6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004aa8:	e033      	b.n	8004b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aaa:	f7fd fd01 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8004aae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ab0:	e02f      	b.n	8004b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fe ff70 	bl	800399c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ac0:	e027      	b.n	8004b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ac2:	f107 0318 	add.w	r3, r7, #24
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7ff f8bc 	bl	8003c44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ad0:	e01f      	b.n	8004b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ad2:	4b2d      	ldr	r3, [pc, #180]	@ (8004b88 <UART_SetConfig+0x934>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0320 	and.w	r3, r3, #32
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d009      	beq.n	8004af2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ade:	4b2a      	ldr	r3, [pc, #168]	@ (8004b88 <UART_SetConfig+0x934>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	08db      	lsrs	r3, r3, #3
 8004ae4:	f003 0303 	and.w	r3, r3, #3
 8004ae8:	4a24      	ldr	r2, [pc, #144]	@ (8004b7c <UART_SetConfig+0x928>)
 8004aea:	fa22 f303 	lsr.w	r3, r2, r3
 8004aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004af0:	e00f      	b.n	8004b12 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004af2:	4b22      	ldr	r3, [pc, #136]	@ (8004b7c <UART_SetConfig+0x928>)
 8004af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004af6:	e00c      	b.n	8004b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004af8:	4b21      	ldr	r3, [pc, #132]	@ (8004b80 <UART_SetConfig+0x92c>)
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004afc:	e009      	b.n	8004b12 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004afe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b04:	e005      	b.n	8004b12 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b06:	2300      	movs	r3, #0
 8004b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b10:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80e7 	beq.w	8004ce8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b1e:	4a19      	ldr	r2, [pc, #100]	@ (8004b84 <UART_SetConfig+0x930>)
 8004b20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b24:	461a      	mov	r2, r3
 8004b26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b2c:	005a      	lsls	r2, r3, #1
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	085b      	lsrs	r3, r3, #1
 8004b34:	441a      	add	r2, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b42:	2b0f      	cmp	r3, #15
 8004b44:	d916      	bls.n	8004b74 <UART_SetConfig+0x920>
 8004b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b4c:	d212      	bcs.n	8004b74 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f023 030f 	bic.w	r3, r3, #15
 8004b56:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b5a:	085b      	lsrs	r3, r3, #1
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004b66:	4313      	orrs	r3, r2
 8004b68:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	e0b9      	b.n	8004ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b7a:	e0b5      	b.n	8004ce8 <UART_SetConfig+0xa94>
 8004b7c:	03d09000 	.word	0x03d09000
 8004b80:	003d0900 	.word	0x003d0900
 8004b84:	080053ec 	.word	0x080053ec
 8004b88:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b8c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	dc49      	bgt.n	8004c28 <UART_SetConfig+0x9d4>
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	db7c      	blt.n	8004c92 <UART_SetConfig+0xa3e>
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d87a      	bhi.n	8004c92 <UART_SetConfig+0xa3e>
 8004b9c:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba4 <UART_SetConfig+0x950>)
 8004b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba2:	bf00      	nop
 8004ba4:	08004c2f 	.word	0x08004c2f
 8004ba8:	08004c37 	.word	0x08004c37
 8004bac:	08004c93 	.word	0x08004c93
 8004bb0:	08004c93 	.word	0x08004c93
 8004bb4:	08004c3f 	.word	0x08004c3f
 8004bb8:	08004c93 	.word	0x08004c93
 8004bbc:	08004c93 	.word	0x08004c93
 8004bc0:	08004c93 	.word	0x08004c93
 8004bc4:	08004c4f 	.word	0x08004c4f
 8004bc8:	08004c93 	.word	0x08004c93
 8004bcc:	08004c93 	.word	0x08004c93
 8004bd0:	08004c93 	.word	0x08004c93
 8004bd4:	08004c93 	.word	0x08004c93
 8004bd8:	08004c93 	.word	0x08004c93
 8004bdc:	08004c93 	.word	0x08004c93
 8004be0:	08004c93 	.word	0x08004c93
 8004be4:	08004c5f 	.word	0x08004c5f
 8004be8:	08004c93 	.word	0x08004c93
 8004bec:	08004c93 	.word	0x08004c93
 8004bf0:	08004c93 	.word	0x08004c93
 8004bf4:	08004c93 	.word	0x08004c93
 8004bf8:	08004c93 	.word	0x08004c93
 8004bfc:	08004c93 	.word	0x08004c93
 8004c00:	08004c93 	.word	0x08004c93
 8004c04:	08004c93 	.word	0x08004c93
 8004c08:	08004c93 	.word	0x08004c93
 8004c0c:	08004c93 	.word	0x08004c93
 8004c10:	08004c93 	.word	0x08004c93
 8004c14:	08004c93 	.word	0x08004c93
 8004c18:	08004c93 	.word	0x08004c93
 8004c1c:	08004c93 	.word	0x08004c93
 8004c20:	08004c93 	.word	0x08004c93
 8004c24:	08004c85 	.word	0x08004c85
 8004c28:	2b40      	cmp	r3, #64	@ 0x40
 8004c2a:	d02e      	beq.n	8004c8a <UART_SetConfig+0xa36>
 8004c2c:	e031      	b.n	8004c92 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2e:	f7fd fc29 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8004c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c34:	e033      	b.n	8004c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c36:	f7fd fc3b 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8004c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c3c:	e02f      	b.n	8004c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe feaa 	bl	800399c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c4c:	e027      	b.n	8004c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c4e:	f107 0318 	add.w	r3, r7, #24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe fff6 	bl	8003c44 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c5c:	e01f      	b.n	8004c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d14 <UART_SetConfig+0xac0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <UART_SetConfig+0xac0>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	08db      	lsrs	r3, r3, #3
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	4a28      	ldr	r2, [pc, #160]	@ (8004d18 <UART_SetConfig+0xac4>)
 8004c76:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c7c:	e00f      	b.n	8004c9e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004c7e:	4b26      	ldr	r3, [pc, #152]	@ (8004d18 <UART_SetConfig+0xac4>)
 8004c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c82:	e00c      	b.n	8004c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c84:	4b25      	ldr	r3, [pc, #148]	@ (8004d1c <UART_SetConfig+0xac8>)
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c88:	e009      	b.n	8004c9e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c90:	e005      	b.n	8004c9e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c9c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d021      	beq.n	8004ce8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	4a1d      	ldr	r2, [pc, #116]	@ (8004d20 <UART_SetConfig+0xacc>)
 8004caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb2:	fbb3 f2f2 	udiv	r2, r3, r2
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	085b      	lsrs	r3, r3, #1
 8004cbc:	441a      	add	r2, r3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cca:	2b0f      	cmp	r3, #15
 8004ccc:	d909      	bls.n	8004ce2 <UART_SetConfig+0xa8e>
 8004cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd4:	d205      	bcs.n	8004ce2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60da      	str	r2, [r3, #12]
 8004ce0:	e002      	b.n	8004ce8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	2200      	movs	r2, #0
 8004d02:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d04:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3748      	adds	r7, #72	@ 0x48
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d12:	bf00      	nop
 8004d14:	58024400 	.word	0x58024400
 8004d18:	03d09000 	.word	0x03d09000
 8004d1c:	003d0900 	.word	0x003d0900
 8004d20:	080053ec 	.word	0x080053ec

08004d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d96:	f003 0304 	and.w	r3, r3, #4
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e1e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e22:	d10a      	bne.n	8004e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b098      	sub	sp, #96	@ 0x60
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e78:	f7fb ffac 	bl	8000dd4 <HAL_GetTick>
 8004e7c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d12f      	bne.n	8004eec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e8c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e94:	2200      	movs	r2, #0
 8004e96:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f88e 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d022      	beq.n	8004eec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ec4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ec6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ed2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e6      	bne.n	8004ea6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e063      	b.n	8004fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d149      	bne.n	8004f8e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004efe:	9300      	str	r3, [sp, #0]
 8004f00:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f02:	2200      	movs	r2, #0
 8004f04:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f857 	bl	8004fbc <UART_WaitOnFlagUntilTimeout>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d03c      	beq.n	8004f8e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f1c:	e853 3f00 	ldrex	r3, [r3]
 8004f20:	623b      	str	r3, [r7, #32]
   return(result);
 8004f22:	6a3b      	ldr	r3, [r7, #32]
 8004f24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	461a      	mov	r2, r3
 8004f30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f34:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e6      	bne.n	8004f14 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3308      	adds	r3, #8
 8004f4c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3308      	adds	r3, #8
 8004f64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f66:	61fa      	str	r2, [r7, #28]
 8004f68:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	69b9      	ldr	r1, [r7, #24]
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	617b      	str	r3, [r7, #20]
   return(result);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e5      	bne.n	8004f46 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e012      	b.n	8004fb4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2220      	movs	r2, #32
 8004f9a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3758      	adds	r7, #88	@ 0x58
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	603b      	str	r3, [r7, #0]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fcc:	e04f      	b.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd4:	d04b      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd6:	f7fb fefd 	bl	8000dd4 <HAL_GetTick>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	69ba      	ldr	r2, [r7, #24]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <UART_WaitOnFlagUntilTimeout+0x30>
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fec:	2303      	movs	r3, #3
 8004fee:	e04e      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0304 	and.w	r3, r3, #4
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d037      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	2b80      	cmp	r3, #128	@ 0x80
 8005002:	d034      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2b40      	cmp	r3, #64	@ 0x40
 8005008:	d031      	beq.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d110      	bne.n	800503a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2208      	movs	r2, #8
 800501e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005020:	68f8      	ldr	r0, [r7, #12]
 8005022:	f000 f839 	bl	8005098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2208      	movs	r2, #8
 800502a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2200      	movs	r2, #0
 8005032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e029      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69db      	ldr	r3, [r3, #28]
 8005040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005044:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005048:	d111      	bne.n	800506e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005052:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005054:	68f8      	ldr	r0, [r7, #12]
 8005056:	f000 f81f 	bl	8005098 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2220      	movs	r2, #32
 800505e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e00f      	b.n	800508e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	69da      	ldr	r2, [r3, #28]
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	4013      	ands	r3, r2
 8005078:	68ba      	ldr	r2, [r7, #8]
 800507a:	429a      	cmp	r2, r3
 800507c:	bf0c      	ite	eq
 800507e:	2301      	moveq	r3, #1
 8005080:	2300      	movne	r3, #0
 8005082:	b2db      	uxtb	r3, r3
 8005084:	461a      	mov	r2, r3
 8005086:	79fb      	ldrb	r3, [r7, #7]
 8005088:	429a      	cmp	r2, r3
 800508a:	d0a0      	beq.n	8004fce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3710      	adds	r7, #16
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
	...

08005098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005098:	b480      	push	{r7}
 800509a:	b095      	sub	sp, #84	@ 0x54
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050be:	643b      	str	r3, [r7, #64]	@ 0x40
 80050c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	6a3b      	ldr	r3, [r7, #32]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80050e2:	69fa      	ldr	r2, [r7, #28]
 80050e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005160 <UART_EndRxTransfer+0xc8>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800510a:	2b01      	cmp	r3, #1
 800510c:	d118      	bne.n	8005140 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	60bb      	str	r3, [r7, #8]
   return(result);
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	f023 0310 	bic.w	r3, r3, #16
 8005122:	647b      	str	r3, [r7, #68]	@ 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6979      	ldr	r1, [r7, #20]
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	613b      	str	r3, [r7, #16]
   return(result);
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2220      	movs	r2, #32
 8005144:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005154:	bf00      	nop
 8005156:	3754      	adds	r7, #84	@ 0x54
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	effffffe 	.word	0xeffffffe

08005164 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_UARTEx_DisableFifoMode+0x16>
 8005176:	2302      	movs	r3, #2
 8005178:	e027      	b.n	80051ca <HAL_UARTEx_DisableFifoMode+0x66>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2224      	movs	r2, #36	@ 0x24
 8005186:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681a      	ldr	r2, [r3, #0]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f022 0201 	bic.w	r2, r2, #1
 80051a0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80051a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr

080051d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b084      	sub	sp, #16
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
 80051de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80051ea:	2302      	movs	r3, #2
 80051ec:	e02d      	b.n	800524a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2201      	movs	r2, #1
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2224      	movs	r2, #36	@ 0x24
 80051fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f022 0201 	bic.w	r2, r2, #1
 8005214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	689b      	ldr	r3, [r3, #8]
 800521c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f850 	bl	80052d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2220      	movs	r2, #32
 800523c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005266:	2302      	movs	r3, #2
 8005268:	e02d      	b.n	80052c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2224      	movs	r2, #36	@ 0x24
 8005276:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	430a      	orrs	r2, r1
 80052a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f812 	bl	80052d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2220      	movs	r2, #32
 80052b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
	...

080052d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b085      	sub	sp, #20
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80052f0:	e031      	b.n	8005356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80052f2:	2310      	movs	r3, #16
 80052f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80052f6:	2310      	movs	r3, #16
 80052f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	0e5b      	lsrs	r3, r3, #25
 8005302:	b2db      	uxtb	r3, r3
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	0f5b      	lsrs	r3, r3, #29
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800531a:	7bbb      	ldrb	r3, [r7, #14]
 800531c:	7b3a      	ldrb	r2, [r7, #12]
 800531e:	4911      	ldr	r1, [pc, #68]	@ (8005364 <UARTEx_SetNbDataToProcess+0x94>)
 8005320:	5c8a      	ldrb	r2, [r1, r2]
 8005322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005326:	7b3a      	ldrb	r2, [r7, #12]
 8005328:	490f      	ldr	r1, [pc, #60]	@ (8005368 <UARTEx_SetNbDataToProcess+0x98>)
 800532a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800532c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005330:	b29a      	uxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005338:	7bfb      	ldrb	r3, [r7, #15]
 800533a:	7b7a      	ldrb	r2, [r7, #13]
 800533c:	4909      	ldr	r1, [pc, #36]	@ (8005364 <UARTEx_SetNbDataToProcess+0x94>)
 800533e:	5c8a      	ldrb	r2, [r1, r2]
 8005340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005344:	7b7a      	ldrb	r2, [r7, #13]
 8005346:	4908      	ldr	r1, [pc, #32]	@ (8005368 <UARTEx_SetNbDataToProcess+0x98>)
 8005348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800534a:	fb93 f3f2 	sdiv	r3, r3, r2
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	08005404 	.word	0x08005404
 8005368:	0800540c 	.word	0x0800540c

0800536c <memset>:
 800536c:	4402      	add	r2, r0
 800536e:	4603      	mov	r3, r0
 8005370:	4293      	cmp	r3, r2
 8005372:	d100      	bne.n	8005376 <memset+0xa>
 8005374:	4770      	bx	lr
 8005376:	f803 1b01 	strb.w	r1, [r3], #1
 800537a:	e7f9      	b.n	8005370 <memset+0x4>

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4d0d      	ldr	r5, [pc, #52]	@ (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	@ (80053b8 <__libc_init_array+0x3c>)
 8005382:	1b64      	subs	r4, r4, r5
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2600      	movs	r6, #0
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4d0b      	ldr	r5, [pc, #44]	@ (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	@ (80053c0 <__libc_init_array+0x44>)
 8005390:	f000 f818 	bl	80053c4 <_init>
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2600      	movs	r6, #0
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	0800541c 	.word	0x0800541c
 80053b8:	0800541c 	.word	0x0800541c
 80053bc:	0800541c 	.word	0x0800541c
 80053c0:	08005420 	.word	0x08005420

080053c4 <_init>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	bf00      	nop
 80053c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ca:	bc08      	pop	{r3}
 80053cc:	469e      	mov	lr, r3
 80053ce:	4770      	bx	lr

080053d0 <_fini>:
 80053d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d2:	bf00      	nop
 80053d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053d6:	bc08      	pop	{r3}
 80053d8:	469e      	mov	lr, r3
 80053da:	4770      	bx	lr
